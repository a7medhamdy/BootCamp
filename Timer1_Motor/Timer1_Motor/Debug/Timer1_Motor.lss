
Timer1_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ed  00000000  00000000  00001c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 01 	call	0x280	; 0x280 <main>
  64:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:
	else if ((PinNum >=PIN24) && (PinNum <=PIN31) )
		/*Read PIN from PORTD*/
		return(GET_BIT(PIND,(PinNum-PIN24)));
	else
		return 0;
}
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	e8 f4       	brcc	.+58     	; 0xaa <DIO_WritePin+0x3e>
  70:	66 23       	and	r22, r22
  72:	69 f0       	breq	.+26     	; 0x8e <DIO_WritePin+0x22>
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	a9 01       	movw	r20, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <DIO_WritePin+0x14>
  7c:	44 0f       	add	r20, r20
  7e:	55 1f       	adc	r21, r21
  80:	8a 95       	dec	r24
  82:	e2 f7       	brpl	.-8      	; 0x7c <DIO_WritePin+0x10>
  84:	ca 01       	movw	r24, r20
  86:	9b b3       	in	r25, 0x1b	; 27
  88:	89 2b       	or	r24, r25
  8a:	8b bb       	out	0x1b, r24	; 27
  8c:	08 95       	ret
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	a9 01       	movw	r20, r18
  94:	02 c0       	rjmp	.+4      	; 0x9a <DIO_WritePin+0x2e>
  96:	44 0f       	add	r20, r20
  98:	55 1f       	adc	r21, r21
  9a:	8a 95       	dec	r24
  9c:	e2 f7       	brpl	.-8      	; 0x96 <DIO_WritePin+0x2a>
  9e:	ca 01       	movw	r24, r20
  a0:	80 95       	com	r24
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	89 23       	and	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret
  aa:	98 ef       	ldi	r25, 0xF8	; 248
  ac:	98 0f       	add	r25, r24
  ae:	98 30       	cpi	r25, 0x08	; 8
  b0:	f0 f4       	brcc	.+60     	; 0xee <DIO_WritePin+0x82>
  b2:	66 23       	and	r22, r22
  b4:	69 f0       	breq	.+26     	; 0xd0 <DIO_WritePin+0x64>
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	a9 01       	movw	r20, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_WritePin+0x56>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	9a 95       	dec	r25
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_WritePin+0x52>
  c6:	ca 01       	movw	r24, r20
  c8:	98 b3       	in	r25, 0x18	; 24
  ca:	89 2b       	or	r24, r25
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret
  d0:	88 50       	subi	r24, 0x08	; 8
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a9 01       	movw	r20, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_WritePin+0x72>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	8a 95       	dec	r24
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_WritePin+0x6e>
  e2:	ca 01       	movw	r24, r20
  e4:	80 95       	com	r24
  e6:	98 b3       	in	r25, 0x18	; 24
  e8:	89 23       	and	r24, r25
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	08 95       	ret
  ee:	90 ef       	ldi	r25, 0xF0	; 240
  f0:	98 0f       	add	r25, r24
  f2:	98 30       	cpi	r25, 0x08	; 8
  f4:	f0 f4       	brcc	.+60     	; 0x132 <DIO_WritePin+0xc6>
  f6:	66 23       	and	r22, r22
  f8:	69 f0       	breq	.+26     	; 0x114 <DIO_WritePin+0xa8>
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	a9 01       	movw	r20, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_WritePin+0x9a>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	9a 95       	dec	r25
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_WritePin+0x96>
 10a:	ca 01       	movw	r24, r20
 10c:	95 b3       	in	r25, 0x15	; 21
 10e:	89 2b       	or	r24, r25
 110:	85 bb       	out	0x15, r24	; 21
 112:	08 95       	ret
 114:	80 51       	subi	r24, 0x10	; 16
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	a9 01       	movw	r20, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_WritePin+0xb6>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_WritePin+0xb2>
 126:	ca 01       	movw	r24, r20
 128:	80 95       	com	r24
 12a:	95 b3       	in	r25, 0x15	; 21
 12c:	89 23       	and	r24, r25
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
 132:	98 ee       	ldi	r25, 0xE8	; 232
 134:	98 0f       	add	r25, r24
 136:	98 30       	cpi	r25, 0x08	; 8
 138:	e8 f4       	brcc	.+58     	; 0x174 <DIO_WritePin+0x108>
 13a:	66 23       	and	r22, r22
 13c:	69 f0       	breq	.+26     	; 0x158 <DIO_WritePin+0xec>
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	a9 01       	movw	r20, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_WritePin+0xde>
 146:	44 0f       	add	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	9a 95       	dec	r25
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_WritePin+0xda>
 14e:	ca 01       	movw	r24, r20
 150:	92 b3       	in	r25, 0x12	; 18
 152:	89 2b       	or	r24, r25
 154:	82 bb       	out	0x12, r24	; 18
 156:	08 95       	ret
 158:	88 51       	subi	r24, 0x18	; 24
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_WritePin+0xfa>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_WritePin+0xf6>
 16a:	ca 01       	movw	r24, r20
 16c:	80 95       	com	r24
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	89 23       	and	r24, r25
 172:	82 bb       	out	0x12, r24	; 18
 174:	08 95       	ret

00000176 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	/*check PORTA PINa from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7))
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	e8 f4       	brcc	.+58     	; 0x1b4 <DIO_SetPinDirection+0x3e>
	{
		if(PinDirection)
 17a:	66 23       	and	r22, r22
 17c:	69 f0       	breq	.+26     	; 0x198 <DIO_SetPinDirection+0x22>
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	a9 01       	movw	r20, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDirection+0x14>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDirection+0x10>
 18e:	ca 01       	movw	r24, r20
 190:	9a b3       	in	r25, 0x1a	; 26
 192:	89 2b       	or	r24, r25
 194:	8a bb       	out	0x1a, r24	; 26
 196:	08 95       	ret
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	a9 01       	movw	r20, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDirection+0x2e>
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDirection+0x2a>
 1a8:	ca 01       	movw	r24, r20
 1aa:	80 95       	com	r24
 1ac:	9a b3       	in	r25, 0x1a	; 26
 1ae:	89 23       	and	r24, r25
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	08 95       	ret
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
 1b4:	98 ef       	ldi	r25, 0xF8	; 248
 1b6:	98 0f       	add	r25, r24
 1b8:	98 30       	cpi	r25, 0x08	; 8
 1ba:	f0 f4       	brcc	.+60     	; 0x1f8 <DIO_SetPinDirection+0x82>
	{
		if(PinDirection)
 1bc:	66 23       	and	r22, r22
 1be:	69 f0       	breq	.+26     	; 0x1da <DIO_SetPinDirection+0x64>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	a9 01       	movw	r20, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinDirection+0x56>
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	9a 95       	dec	r25
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinDirection+0x52>
 1d0:	ca 01       	movw	r24, r20
 1d2:	97 b3       	in	r25, 0x17	; 23
 1d4:	89 2b       	or	r24, r25
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	08 95       	ret
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
 1da:	88 50       	subi	r24, 0x08	; 8
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	a9 01       	movw	r20, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0x72>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0x6e>
 1ec:	ca 01       	movw	r24, r20
 1ee:	80 95       	com	r24
 1f0:	97 b3       	in	r25, 0x17	; 23
 1f2:	89 23       	and	r24, r25
 1f4:	87 bb       	out	0x17, r24	; 23
 1f6:	08 95       	ret
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
 1f8:	90 ef       	ldi	r25, 0xF0	; 240
 1fa:	98 0f       	add	r25, r24
 1fc:	98 30       	cpi	r25, 0x08	; 8
 1fe:	f0 f4       	brcc	.+60     	; 0x23c <DIO_SetPinDirection+0xc6>
	{
		if(PinDirection)
 200:	66 23       	and	r22, r22
 202:	69 f0       	breq	.+26     	; 0x21e <DIO_SetPinDirection+0xa8>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	a9 01       	movw	r20, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinDirection+0x9a>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	9a 95       	dec	r25
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinDirection+0x96>
 214:	ca 01       	movw	r24, r20
 216:	94 b3       	in	r25, 0x14	; 20
 218:	89 2b       	or	r24, r25
 21a:	84 bb       	out	0x14, r24	; 20
 21c:	08 95       	ret
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
 21e:	80 51       	subi	r24, 0x10	; 16
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	a9 01       	movw	r20, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SetPinDirection+0xb6>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SetPinDirection+0xb2>
 230:	ca 01       	movw	r24, r20
 232:	80 95       	com	r24
 234:	94 b3       	in	r25, 0x14	; 20
 236:	89 23       	and	r24, r25
 238:	84 bb       	out	0x14, r24	; 20
 23a:	08 95       	ret
	}	
	/*check PORTA PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31))
 23c:	98 ee       	ldi	r25, 0xE8	; 232
 23e:	98 0f       	add	r25, r24
 240:	98 30       	cpi	r25, 0x08	; 8
 242:	e8 f4       	brcc	.+58     	; 0x27e <DIO_SetPinDirection+0x108>
	{
		if(PinDirection)
 244:	66 23       	and	r22, r22
 246:	69 f0       	breq	.+26     	; 0x262 <DIO_SetPinDirection+0xec>
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	a9 01       	movw	r20, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPinDirection+0xde>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	9a 95       	dec	r25
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPinDirection+0xda>
 258:	ca 01       	movw	r24, r20
 25a:	91 b3       	in	r25, 0x11	; 17
 25c:	89 2b       	or	r24, r25
 25e:	81 bb       	out	0x11, r24	; 17
 260:	08 95       	ret
		else
		/*SET PIN in PORTD as input*/
		CLEAR_BIT(DDRD,(PinNum-PIN24));
 262:	88 51       	subi	r24, 0x18	; 24
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	a9 01       	movw	r20, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinDirection+0xfa>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinDirection+0xf6>
 274:	ca 01       	movw	r24, r20
 276:	80 95       	com	r24
 278:	91 b3       	in	r25, 0x11	; 17
 27a:	89 23       	and	r24, r25
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	08 95       	ret

00000280 <main>:
#include "BitwiseOperation.h"


int main(void)
{
	Timer1_Init();
 280:	0e 94 4c 01 	call	0x298	; 0x298 <Timer1_Init>
	
	Timer1_PWM(50,300);
 284:	4c e2       	ldi	r20, 0x2C	; 44
 286:	51 e0       	ldi	r21, 0x01	; 1
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Timer1_PWM>
	
   
}
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	08 95       	ret

00000298 <Timer1_Init>:
#include "BitwiseOperation.h"

void Timer1_Init()
{
	/*Set Motors pins direction*/
	DIO_SetPinDirection(OC1A,HIGH);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8d e1       	ldi	r24, 0x1D	; 29
 29c:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_SetPinDirection>
	DIO_SetPinDirection(OC1B,HIGH);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	8c e1       	ldi	r24, 0x1C	; 28
 2a4:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIR_1A,HIGH);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	8a e1       	ldi	r24, 0x1A	; 26
 2ac:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIR_1B,HIGH);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8b e1       	ldi	r24, 0x1B	; 27
 2b4:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIR_2A,HIGH);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	8e e1       	ldi	r24, 0x1E	; 30
 2bc:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIR_2B,HIGH);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	8f e1       	ldi	r24, 0x1F	; 31
 2c4:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_SetPinDirection>
	/*Set direction of motors*/
	DIO_WritePin(DIR_1A,HIGH);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	8a e1       	ldi	r24, 0x1A	; 26
 2cc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(DIR_2A,HIGH);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	8e e1       	ldi	r24, 0x1E	; 30
 2d4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(DIR_1B,LOW);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	8b e1       	ldi	r24, 0x1B	; 27
 2dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(DIR_2B,LOW);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	8f e1       	ldi	r24, 0x1F	; 31
 2e4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	
	#ifdef FAST_PWM
	/*Fast PWM (MODE-14)*/
	CLEAR_BIT(TCCR1A,WGM10);
	SET_BIT(TCCR1A,WGM11);
 2e8:	9f b5       	in	r25, 0x2f	; 47
 2ea:	9e 7f       	andi	r25, 0xFE	; 254
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
 2ec:	8e b5       	in	r24, 0x2e	; 46
	#endif
	#ifdef INVERTING_MODE
	SET_BIT(TCCR1A,COM1A1);
	SET_BIT(TCCR1A,COM1B1);
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1B0);
 2ee:	92 6f       	ori	r25, 0xF2	; 242
 2f0:	9f bd       	out	0x2f, r25	; 47
	/*Set prescalar =1*/
	SET_BIT(TCCR1B,CS10);
	CLEAR_BIT(TCCR1B,CS11);
	CLEAR_BIT(TCCR1B,CS12);
 2f2:	80 7e       	andi	r24, 0xE0	; 224
 2f4:	89 61       	ori	r24, 0x19	; 25
 2f6:	8e bd       	out	0x2e, r24	; 46
 2f8:	08 95       	ret

000002fa <Timer1_PWM>:
	
}


void Timer1_PWM(uint8 duty_cycle,uint32 frequency)
{
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24
	ICR1H = (Top_Value & HIGH_MASK) >> SHIFT_EIGHT;
	ICR1L = Top_Value & LOW_MASK;
	#endif
	
    #ifdef INVERTING_MODE
	Top_Value = (F_CPU/TWO*frequency);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	92 e1       	ldi	r25, 0x12	; 18
 302:	48 9f       	mul	r20, r24
 304:	f0 01       	movw	r30, r0
 306:	49 9f       	mul	r20, r25
 308:	f0 0d       	add	r31, r0
 30a:	58 9f       	mul	r21, r24
 30c:	f0 0d       	add	r31, r0
 30e:	11 24       	eor	r1, r1
	Compare_Value = (Top_Value/PERCENTAGE)*(PERCENTAGE-duty_cycle) ;
 310:	9f 01       	movw	r18, r30
 312:	36 95       	lsr	r19
 314:	27 95       	ror	r18
 316:	36 95       	lsr	r19
 318:	27 95       	ror	r18
 31a:	ab e7       	ldi	r26, 0x7B	; 123
 31c:	b4 e1       	ldi	r27, 0x14	; 20
 31e:	0e 94 a4 01 	call	0x348	; 0x348 <__umulhisi3>
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	24 e6       	ldi	r18, 0x64	; 100
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	2c 1b       	sub	r18, r28
 32c:	31 09       	sbc	r19, r1
 32e:	82 9f       	mul	r24, r18
 330:	a0 01       	movw	r20, r0
 332:	83 9f       	mul	r24, r19
 334:	50 0d       	add	r21, r0
 336:	92 9f       	mul	r25, r18
 338:	50 0d       	add	r21, r0
 33a:	11 24       	eor	r1, r1
	/*Set OCR*/
	OCR1BH = Compare_Value >> SHIFT_EIGHT;
 33c:	59 bd       	out	0x29, r21	; 41
	OCR1BL = Compare_Value & LOW_MASK;
 33e:	48 bd       	out	0x28, r20	; 40
	/*Set Top value*/
	ICR1H = (Top_Value & HIGH_MASK) >> SHIFT_EIGHT;
 340:	f7 bd       	out	0x27, r31	; 39
	ICR1L = Top_Value & LOW_MASK;
 342:	16 bc       	out	0x26, r1	; 38
	/*Set Top value*/
	ICR1H = (Top_Value & HIGH_MASK) >> SHIFT_EIGHT;
	ICR1L = Top_Value & LOW_MASK;
	#endif
	#endif
}
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <__umulhisi3>:
 348:	a2 9f       	mul	r26, r18
 34a:	b0 01       	movw	r22, r0
 34c:	b3 9f       	mul	r27, r19
 34e:	c0 01       	movw	r24, r0
 350:	a3 9f       	mul	r26, r19
 352:	70 0d       	add	r23, r0
 354:	81 1d       	adc	r24, r1
 356:	11 24       	eor	r1, r1
 358:	91 1d       	adc	r25, r1
 35a:	b2 9f       	mul	r27, r18
 35c:	70 0d       	add	r23, r0
 35e:	81 1d       	adc	r24, r1
 360:	11 24       	eor	r1, r1
 362:	91 1d       	adc	r25, r1
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>


Traffic Light Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000006fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bc  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000639  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036b  00000000  00000000  00002061  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  74:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	else if ((PinNum >=PIN24) && (PinNum <=PIN31) )
		/*Read PIN from PORTD*/
		return(GET_BIT(PIND,(PinNum-PIN24)));
	else
		return 0;
}
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_WritePin+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	70 f5       	brcc	.+92     	; 0xec <DIO_WritePin+0x70>
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 23       	and	r24, r24
  94:	a9 f0       	breq	.+42     	; 0xc0 <DIO_WritePin+0x44>
  96:	8b e3       	ldi	r24, 0x3B	; 59
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	2b e3       	ldi	r18, 0x3B	; 59
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	20 81       	ld	r18, Z
  a2:	62 2f       	mov	r22, r18
  a4:	29 81       	ldd	r18, Y+1	; 0x01
  a6:	42 2f       	mov	r20, r18
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_WritePin+0x38>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	4a 95       	dec	r20
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_WritePin+0x34>
  b8:	26 2b       	or	r18, r22
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	c4 c0       	rjmp	.+392    	; 0x248 <DIO_WritePin+0x1cc>
  c0:	8b e3       	ldi	r24, 0x3B	; 59
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2b e3       	ldi	r18, 0x3B	; 59
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	62 2f       	mov	r22, r18
  ce:	29 81       	ldd	r18, Y+1	; 0x01
  d0:	42 2f       	mov	r20, r18
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_WritePin+0x62>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	4a 95       	dec	r20
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_WritePin+0x5e>
  e2:	20 95       	com	r18
  e4:	26 23       	and	r18, r22
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	ae c0       	rjmp	.+348    	; 0x248 <DIO_WritePin+0x1cc>
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	b8 f1       	brcs	.+110    	; 0x160 <DIO_WritePin+0xe4>
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	80 31       	cpi	r24, 0x10	; 16
  f6:	a0 f5       	brcc	.+104    	; 0x160 <DIO_WritePin+0xe4>
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	88 23       	and	r24, r24
  fc:	c1 f0       	breq	.+48     	; 0x12e <DIO_WritePin+0xb2>
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	28 e3       	ldi	r18, 0x38	; 56
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	62 2f       	mov	r22, r18
 10c:	29 81       	ldd	r18, Y+1	; 0x01
 10e:	22 2f       	mov	r18, r18
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	a9 01       	movw	r20, r18
 114:	48 50       	subi	r20, 0x08	; 8
 116:	51 09       	sbc	r21, r1
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_WritePin+0xa6>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	4a 95       	dec	r20
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_WritePin+0xa2>
 126:	26 2b       	or	r18, r22
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	8d c0       	rjmp	.+282    	; 0x248 <DIO_WritePin+0x1cc>
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	28 e3       	ldi	r18, 0x38	; 56
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	62 2f       	mov	r22, r18
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	22 2f       	mov	r18, r18
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	a9 01       	movw	r20, r18
 144:	48 50       	subi	r20, 0x08	; 8
 146:	51 09       	sbc	r21, r1
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_WritePin+0xd6>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	4a 95       	dec	r20
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_WritePin+0xd2>
 156:	20 95       	com	r18
 158:	26 23       	and	r18, r22
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	74 c0       	rjmp	.+232    	; 0x248 <DIO_WritePin+0x1cc>
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	b8 f1       	brcs	.+110    	; 0x1d4 <DIO_WritePin+0x158>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 31       	cpi	r24, 0x18	; 24
 16a:	a0 f5       	brcc	.+104    	; 0x1d4 <DIO_WritePin+0x158>
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	88 23       	and	r24, r24
 170:	c1 f0       	breq	.+48     	; 0x1a2 <DIO_WritePin+0x126>
 172:	85 e3       	ldi	r24, 0x35	; 53
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	25 e3       	ldi	r18, 0x35	; 53
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	62 2f       	mov	r22, r18
 180:	29 81       	ldd	r18, Y+1	; 0x01
 182:	22 2f       	mov	r18, r18
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	a9 01       	movw	r20, r18
 188:	40 51       	subi	r20, 0x10	; 16
 18a:	51 09       	sbc	r21, r1
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_WritePin+0x11a>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	4a 95       	dec	r20
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_WritePin+0x116>
 19a:	26 2b       	or	r18, r22
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	53 c0       	rjmp	.+166    	; 0x248 <DIO_WritePin+0x1cc>
 1a2:	85 e3       	ldi	r24, 0x35	; 53
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	25 e3       	ldi	r18, 0x35	; 53
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	62 2f       	mov	r22, r18
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	22 2f       	mov	r18, r18
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	a9 01       	movw	r20, r18
 1b8:	40 51       	subi	r20, 0x10	; 16
 1ba:	51 09       	sbc	r21, r1
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x14a>
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	4a 95       	dec	r20
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x146>
 1ca:	20 95       	com	r18
 1cc:	26 23       	and	r18, r22
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
 1d2:	3a c0       	rjmp	.+116    	; 0x248 <DIO_WritePin+0x1cc>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	88 31       	cpi	r24, 0x18	; 24
 1d8:	b8 f1       	brcs	.+110    	; 0x248 <DIO_WritePin+0x1cc>
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	80 32       	cpi	r24, 0x20	; 32
 1de:	a0 f5       	brcc	.+104    	; 0x248 <DIO_WritePin+0x1cc>
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	88 23       	and	r24, r24
 1e4:	c1 f0       	breq	.+48     	; 0x216 <DIO_WritePin+0x19a>
 1e6:	82 e3       	ldi	r24, 0x32	; 50
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	22 e3       	ldi	r18, 0x32	; 50
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	f9 01       	movw	r30, r18
 1f0:	20 81       	ld	r18, Z
 1f2:	62 2f       	mov	r22, r18
 1f4:	29 81       	ldd	r18, Y+1	; 0x01
 1f6:	22 2f       	mov	r18, r18
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	a9 01       	movw	r20, r18
 1fc:	48 51       	subi	r20, 0x18	; 24
 1fe:	51 09       	sbc	r21, r1
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WritePin+0x18e>
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	4a 95       	dec	r20
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WritePin+0x18a>
 20e:	26 2b       	or	r18, r22
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
 214:	19 c0       	rjmp	.+50     	; 0x248 <DIO_WritePin+0x1cc>
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	22 e3       	ldi	r18, 0x32	; 50
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	62 2f       	mov	r22, r18
 224:	29 81       	ldd	r18, Y+1	; 0x01
 226:	22 2f       	mov	r18, r18
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	a9 01       	movw	r20, r18
 22c:	48 51       	subi	r20, 0x18	; 24
 22e:	51 09       	sbc	r21, r1
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_WritePin+0x1be>
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	4a 95       	dec	r20
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_WritePin+0x1ba>
 23e:	20 95       	com	r18
 240:	26 23       	and	r18, r22
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
 246:	00 c0       	rjmp	.+0      	; 0x248 <DIO_WritePin+0x1cc>
 248:	00 00       	nop
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <DIO_SetPinDirection+0x6>
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	6a 83       	std	Y+2, r22	; 0x02
	/*check PORTA PINa from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7))
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	70 f5       	brcc	.+92     	; 0x2c4 <DIO_SetPinDirection+0x70>
	{
		if(PinDirection)
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	88 23       	and	r24, r24
 26c:	a9 f0       	breq	.+42     	; 0x298 <DIO_SetPinDirection+0x44>
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
 26e:	8a e3       	ldi	r24, 0x3A	; 58
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	2a e3       	ldi	r18, 0x3A	; 58
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	62 2f       	mov	r22, r18
 27c:	29 81       	ldd	r18, Y+1	; 0x01
 27e:	42 2f       	mov	r20, r18
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinDirection+0x38>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	4a 95       	dec	r20
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinDirection+0x34>
 290:	26 2b       	or	r18, r22
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 296:	c4 c0       	rjmp	.+392    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(PinDirection)
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
 298:	8a e3       	ldi	r24, 0x3A	; 58
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	2a e3       	ldi	r18, 0x3A	; 58
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	62 2f       	mov	r22, r18
 2a6:	29 81       	ldd	r18, Y+1	; 0x01
 2a8:	42 2f       	mov	r20, r18
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPinDirection+0x62>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	4a 95       	dec	r20
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPinDirection+0x5e>
 2ba:	20 95       	com	r18
 2bc:	26 23       	and	r18, r22
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 2c2:	ae c0       	rjmp	.+348    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	b8 f1       	brcs	.+110    	; 0x338 <DIO_SetPinDirection+0xe4>
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	80 31       	cpi	r24, 0x10	; 16
 2ce:	a0 f5       	brcc	.+104    	; 0x338 <DIO_SetPinDirection+0xe4>
	{
		if(PinDirection)
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	88 23       	and	r24, r24
 2d4:	c1 f0       	breq	.+48     	; 0x306 <DIO_SetPinDirection+0xb2>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
 2d6:	87 e3       	ldi	r24, 0x37	; 55
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	27 e3       	ldi	r18, 0x37	; 55
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	62 2f       	mov	r22, r18
 2e4:	29 81       	ldd	r18, Y+1	; 0x01
 2e6:	22 2f       	mov	r18, r18
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	a9 01       	movw	r20, r18
 2ec:	48 50       	subi	r20, 0x08	; 8
 2ee:	51 09       	sbc	r21, r1
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_SetPinDirection+0xa6>
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	4a 95       	dec	r20
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_SetPinDirection+0xa2>
 2fe:	26 2b       	or	r18, r22
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinDirection)
 304:	8d c0       	rjmp	.+282    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
 306:	87 e3       	ldi	r24, 0x37	; 55
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	27 e3       	ldi	r18, 0x37	; 55
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	62 2f       	mov	r22, r18
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	22 2f       	mov	r18, r18
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	a9 01       	movw	r20, r18
 31c:	48 50       	subi	r20, 0x08	; 8
 31e:	51 09       	sbc	r21, r1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPinDirection+0xd6>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	4a 95       	dec	r20
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPinDirection+0xd2>
 32e:	20 95       	com	r18
 330:	26 23       	and	r18, r22
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinDirection)
 336:	74 c0       	rjmp	.+232    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	80 31       	cpi	r24, 0x10	; 16
 33c:	b8 f1       	brcs	.+110    	; 0x3ac <DIO_SetPinDirection+0x158>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	88 31       	cpi	r24, 0x18	; 24
 342:	a0 f5       	brcc	.+104    	; 0x3ac <DIO_SetPinDirection+0x158>
	{
		if(PinDirection)
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	88 23       	and	r24, r24
 348:	c1 f0       	breq	.+48     	; 0x37a <DIO_SetPinDirection+0x126>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
 34a:	84 e3       	ldi	r24, 0x34	; 52
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	24 e3       	ldi	r18, 0x34	; 52
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	62 2f       	mov	r22, r18
 358:	29 81       	ldd	r18, Y+1	; 0x01
 35a:	22 2f       	mov	r18, r18
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	a9 01       	movw	r20, r18
 360:	40 51       	subi	r20, 0x10	; 16
 362:	51 09       	sbc	r21, r1
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPinDirection+0x11a>
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	4a 95       	dec	r20
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPinDirection+0x116>
 372:	26 2b       	or	r18, r22
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinDirection)
 378:	53 c0       	rjmp	.+166    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
 37a:	84 e3       	ldi	r24, 0x34	; 52
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	24 e3       	ldi	r18, 0x34	; 52
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	62 2f       	mov	r22, r18
 388:	29 81       	ldd	r18, Y+1	; 0x01
 38a:	22 2f       	mov	r18, r18
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	a9 01       	movw	r20, r18
 390:	40 51       	subi	r20, 0x10	; 16
 392:	51 09       	sbc	r21, r1
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinDirection+0x14a>
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	4a 95       	dec	r20
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinDirection+0x146>
 3a2:	20 95       	com	r18
 3a4:	26 23       	and	r18, r22
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinDirection)
 3aa:	3a c0       	rjmp	.+116    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
	}	
	/*check PORTA PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31))
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	88 31       	cpi	r24, 0x18	; 24
 3b0:	b8 f1       	brcs	.+110    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	80 32       	cpi	r24, 0x20	; 32
 3b6:	a0 f5       	brcc	.+104    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		if(PinDirection)
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	88 23       	and	r24, r24
 3bc:	c1 f0       	breq	.+48     	; 0x3ee <DIO_SetPinDirection+0x19a>
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
 3be:	81 e3       	ldi	r24, 0x31	; 49
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	21 e3       	ldi	r18, 0x31	; 49
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	62 2f       	mov	r22, r18
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	22 2f       	mov	r18, r18
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	a9 01       	movw	r20, r18
 3d4:	48 51       	subi	r20, 0x18	; 24
 3d6:	51 09       	sbc	r21, r1
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPinDirection+0x18e>
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	4a 95       	dec	r20
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPinDirection+0x18a>
 3e6:	26 2b       	or	r18, r22
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 3ec:	19 c0       	rjmp	.+50     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if(PinDirection)
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
		else
		/*SET PIN in PORTD as input*/
		CLEAR_BIT(DDRD,(PinNum-PIN24));
 3ee:	81 e3       	ldi	r24, 0x31	; 49
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	21 e3       	ldi	r18, 0x31	; 49
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	62 2f       	mov	r22, r18
 3fc:	29 81       	ldd	r18, Y+1	; 0x01
 3fe:	22 2f       	mov	r18, r18
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	a9 01       	movw	r20, r18
 404:	48 51       	subi	r20, 0x18	; 24
 406:	51 09       	sbc	r21, r1
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	4a 95       	dec	r20
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	20 95       	com	r18
 418:	26 23       	and	r18, r22
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <main>:


volatile uint8 flag=ZERO;

int main(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
	/*SET LEDS direction as output*/
	DIO_SetPinDirection(LED_ONE,HIGH);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	8d e0       	ldi	r24, 0x0D	; 13
 438:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED_TWO,HIGH);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	8e e0       	ldi	r24, 0x0E	; 14
 440:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED_THREE,HIGH);
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	8f e0       	ldi	r24, 0x0F	; 15
 448:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPinDirection>
	
	/*SET Buttons direction as input*/
	DIO_SetPinDirection(BUTTON1,LOW);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPinDirection>
	
	/*Initalize timer*/
	Timer_Init();
 454:	0e 94 76 02 	call	0x4ec	; 0x4ec <Timer_Init>

    while (1) 
    {
		/*Enable Global Interrupt*/
		Enable_Global_Interrupt();
 458:	0e 94 9e 02 	call	0x53c	; 0x53c <Enable_Global_Interrupt>
		
		/*Go To Ready State*/
		if (flag == Ready)
 45c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	69 f4       	brne	.+26     	; 0x47e <main+0x52>
		{
			DIO_WritePin(LED_THREE,HIGH);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	8f e0       	ldi	r24, 0x0F	; 15
 468:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_TWO,LOW);
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	8e e0       	ldi	r24, 0x0E	; 14
 470:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_ONE,LOW);
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	8d e0       	ldi	r24, 0x0D	; 13
 478:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 47c:	ed cf       	rjmp	.-38     	; 0x458 <main+0x2c>
		}
		
		/*Go To GO State*/
		else if(flag == GO)
 47e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	69 f4       	brne	.+26     	; 0x4a0 <main+0x74>
		{
			DIO_WritePin(LED_THREE,LOW);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	8f e0       	ldi	r24, 0x0F	; 15
 48a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_TWO,LOW);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8e e0       	ldi	r24, 0x0E	; 14
 492:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_ONE,HIGH);
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	8d e0       	ldi	r24, 0x0D	; 13
 49a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 49e:	dc cf       	rjmp	.-72     	; 0x458 <main+0x2c>
		}
		
		/*Go To Stop State*/
		else if(flag == STOP)
 4a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4a4:	83 30       	cpi	r24, 0x03	; 3
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <main+0x9a>
		{
			DIO_WritePin(LED_THREE,LOW);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	8f e0       	ldi	r24, 0x0F	; 15
 4ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_TWO,HIGH);
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	8e e0       	ldi	r24, 0x0E	; 14
 4b4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_ONE,LOW);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	8d e0       	ldi	r24, 0x0D	; 13
 4bc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			flag = LOW;
 4c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 4c4:	c9 cf       	rjmp	.-110    	; 0x458 <main+0x2c>
		}
		
		/*Go To Stop State if Button is pressed*/
		else if(flag == EXT_INT)
 4c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	29 f6       	brne	.-118    	; 0x458 <main+0x2c>
		{
			DIO_WritePin(LED_THREE,HIGH);
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_TWO,LOW);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	8e e0       	ldi	r24, 0x0E	; 14
 4da:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(LED_ONE,LOW);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	8d e0       	ldi	r24, 0x0D	; 13
 4e2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			flag = LOW;
 4e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		}
	}
 4ea:	b6 cf       	rjmp	.-148    	; 0x458 <main+0x2c>

000004ec <Timer_Init>:

/*declaration of Global intterupt enable function*/
void Enable_Global_Interrupt();

void Timer_Init()
{
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
	/*Set Timer MOde & prescaler*/
	TIMER_TCCR0 = TIMER_CONTROL_VALUE;
 4f4:	83 e5       	ldi	r24, 0x53	; 83
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	2b e0       	ldi	r18, 0x0B	; 11
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
	/*Set Timer initial value*/
	TIMER_TCNT0 = TIMER_TCNT_VALUE;
 4fe:	82 e5       	ldi	r24, 0x52	; 82
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	fc 01       	movw	r30, r24
 504:	10 82       	st	Z, r1
	/*Set Timer out compare value*/
	TIMER_OCR0 = TIMER_OCR_VALUE;
 506:	8c e5       	ldi	r24, 0x5C	; 92
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	29 ef       	ldi	r18, 0xF9	; 249
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
	SET_BIT(TIMER_TIMSK,OCIE0);
 510:	89 e5       	ldi	r24, 0x59	; 89
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	29 e5       	ldi	r18, 0x59	; 89
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	22 60       	ori	r18, 0x02	; 2
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
	
	/*Ext INT INIT*/
	SET_BIT(GICR_INTERRUPT,INT2);
 522:	8b e5       	ldi	r24, 0x5B	; 91
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	2b e5       	ldi	r18, 0x5B	; 91
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	20 62       	ori	r18, 0x20	; 32
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
}
 534:	00 00       	nop
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <Enable_Global_Interrupt>:

/*function to enable global interrupt*/
void Enable_Global_Interrupt()
{
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_INTERRUPT,SEVEN);
 544:	8f e5       	ldi	r24, 0x5F	; 95
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2f e5       	ldi	r18, 0x5F	; 95
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	20 68       	ori	r18, 0x80	; 128
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
}
 556:	00 00       	nop
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <__vector_10>:

/*OCR interrupt service routine*/
ISR(TIMER0_COMP_vect)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
	if(counter < ONE_MS)
 58a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 58e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 592:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <counter+0x2>
 596:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <counter+0x3>
 59a:	88 3e       	cpi	r24, 0xE8	; 232
 59c:	93 40       	sbci	r25, 0x03	; 3
 59e:	a1 05       	cpc	r26, r1
 5a0:	b1 05       	cpc	r27, r1
 5a2:	a0 f4       	brcc	.+40     	; 0x5cc <__vector_10+0x6e>
	{
		counter++;
 5a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 5a8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 5ac:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <counter+0x2>
 5b0:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <counter+0x3>
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	a1 1d       	adc	r26, r1
 5b8:	b1 1d       	adc	r27, r1
 5ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter>
 5be:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <counter+0x1>
 5c2:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <counter+0x2>
 5c6:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <counter+0x3>
 5ca:	0d c0       	rjmp	.+26     	; 0x5e6 <__vector_10+0x88>
	}
	else
	{
		counter=ZERO;
 5cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
 5d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 5d4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter+0x2>
 5d8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x3>
		flag++;
 5dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
	Enable_Global_Interrupt();
 5e6:	0e 94 9e 02 	call	0x53c	; 0x53c <Enable_Global_Interrupt>
}
 5ea:	00 00       	nop
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <__vector_3>:

/*External Interrupt ISR*/
ISR(INT2_vect)
{
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
		flag = FOUR;
 640:	84 e0       	ldi	r24, 0x04	; 4
 642:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		counter = ZERO;
 646:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
 64a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 64e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter+0x2>
 652:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x3>
		Enable_Global_Interrupt();
 656:	0e 94 9e 02 	call	0x53c	; 0x53c <Enable_Global_Interrupt>
 65a:	00 00       	nop
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>


OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000d7c  00000e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000457  0080008c  0080008c  00000e3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c36  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000891  00000000  00000000  00001be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000896  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00002d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054e  00000000  00000000  000034d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3e       	cpi	r26, 0xE3	; 227
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  8a:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
#include "DIO_cfg.h"
#include "DIO.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
	/*check PORTA PINS from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7))
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	70 f5       	brcc	.+92     	; 0x102 <DIO_WritePin+0x70>
	{
		if(PinValue )
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 23       	and	r24, r24
  aa:	a9 f0       	breq	.+42     	; 0xd6 <DIO_WritePin+0x44>
			/*write 1 on pin*/
			 SET_BIT(PORTA,PinNum);
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	62 2f       	mov	r22, r18
  ba:	29 81       	ldd	r18, Y+1	; 0x01
  bc:	42 2f       	mov	r20, r18
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WritePin+0x38>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	4a 95       	dec	r20
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WritePin+0x34>
  ce:	26 2b       	or	r18, r22
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	else
	{
		
	}

}
  d4:	c4 c0       	rjmp	.+392    	; 0x25e <DIO_WritePin+0x1cc>
		if(PinValue )
			/*write 1 on pin*/
			 SET_BIT(PORTA,PinNum);
		else
			/*write 0 on pin*/
			CLEAR_BIT(PORTA,PinNum);
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	62 2f       	mov	r22, r18
  e4:	29 81       	ldd	r18, Y+1	; 0x01
  e6:	42 2f       	mov	r20, r18
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_WritePin+0x62>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	4a 95       	dec	r20
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_WritePin+0x5e>
  f8:	20 95       	com	r18
  fa:	26 23       	and	r18, r22
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	else
	{
		
	}

}
 100:	ae c0       	rjmp	.+348    	; 0x25e <DIO_WritePin+0x1cc>
		else
			/*write 0 on pin*/
			CLEAR_BIT(PORTA,PinNum);
	}
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	b8 f1       	brcs	.+110    	; 0x176 <DIO_WritePin+0xe4>
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	80 31       	cpi	r24, 0x10	; 16
 10c:	a0 f5       	brcc	.+104    	; 0x176 <DIO_WritePin+0xe4>
	{
		if(PinValue)
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	88 23       	and	r24, r24
 112:	c1 f0       	breq	.+48     	; 0x144 <DIO_WritePin+0xb2>
		/*write 1 on pin*/
		SET_BIT(PORTB,(PinNum-PIN8));
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	28 e3       	ldi	r18, 0x38	; 56
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	62 2f       	mov	r22, r18
 122:	29 81       	ldd	r18, Y+1	; 0x01
 124:	22 2f       	mov	r18, r18
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	48 50       	subi	r20, 0x08	; 8
 12c:	51 09       	sbc	r21, r1
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_WritePin+0xa6>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	4a 95       	dec	r20
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_WritePin+0xa2>
 13c:	26 2b       	or	r18, r22
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
			CLEAR_BIT(PORTA,PinNum);
	}
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinValue)
 142:	8d c0       	rjmp	.+282    	; 0x25e <DIO_WritePin+0x1cc>
		/*write 1 on pin*/
		SET_BIT(PORTB,(PinNum-PIN8));
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTB,(PinNum-PIN8));
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	28 e3       	ldi	r18, 0x38	; 56
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	62 2f       	mov	r22, r18
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	22 2f       	mov	r18, r18
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	a9 01       	movw	r20, r18
 15a:	48 50       	subi	r20, 0x08	; 8
 15c:	51 09       	sbc	r21, r1
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_WritePin+0xd6>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	4a 95       	dec	r20
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_WritePin+0xd2>
 16c:	20 95       	com	r18
 16e:	26 23       	and	r18, r22
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
			CLEAR_BIT(PORTA,PinNum);
	}
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinValue)
 174:	74 c0       	rjmp	.+232    	; 0x25e <DIO_WritePin+0x1cc>
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTB,(PinNum-PIN8));
	}
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	80 31       	cpi	r24, 0x10	; 16
 17a:	b8 f1       	brcs	.+110    	; 0x1ea <DIO_WritePin+0x158>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	a0 f5       	brcc	.+104    	; 0x1ea <DIO_WritePin+0x158>
	{
		if(PinValue)
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	88 23       	and	r24, r24
 186:	c1 f0       	breq	.+48     	; 0x1b8 <DIO_WritePin+0x126>
		/*write 1 on pin*/
		SET_BIT(PORTC,(PinNum-PIN16));
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 e3       	ldi	r18, 0x35	; 53
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	62 2f       	mov	r22, r18
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	22 2f       	mov	r18, r18
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	a9 01       	movw	r20, r18
 19e:	40 51       	subi	r20, 0x10	; 16
 1a0:	51 09       	sbc	r21, r1
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePin+0x11a>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	4a 95       	dec	r20
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePin+0x116>
 1b0:	26 2b       	or	r18, r22
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB,(PinNum-PIN8));
	}
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinValue)
 1b6:	53 c0       	rjmp	.+166    	; 0x25e <DIO_WritePin+0x1cc>
		/*write 1 on pin*/
		SET_BIT(PORTC,(PinNum-PIN16));
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTC,(PinNum-PIN16));
 1b8:	85 e3       	ldi	r24, 0x35	; 53
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	25 e3       	ldi	r18, 0x35	; 53
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	62 2f       	mov	r22, r18
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	22 2f       	mov	r18, r18
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	a9 01       	movw	r20, r18
 1ce:	40 51       	subi	r20, 0x10	; 16
 1d0:	51 09       	sbc	r21, r1
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_WritePin+0x14a>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	4a 95       	dec	r20
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_WritePin+0x146>
 1e0:	20 95       	com	r18
 1e2:	26 23       	and	r18, r22
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB,(PinNum-PIN8));
	}
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinValue)
 1e8:	3a c0       	rjmp	.+116    	; 0x25e <DIO_WritePin+0x1cc>
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTC,(PinNum-PIN16));
	}	
	/*check PORTD PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31))
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 31       	cpi	r24, 0x18	; 24
 1ee:	b8 f1       	brcs	.+110    	; 0x25e <DIO_WritePin+0x1cc>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	80 32       	cpi	r24, 0x20	; 32
 1f4:	a0 f5       	brcc	.+104    	; 0x25e <DIO_WritePin+0x1cc>
	{
		if(PinValue)
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	88 23       	and	r24, r24
 1fa:	c1 f0       	breq	.+48     	; 0x22c <DIO_WritePin+0x19a>
		/*write 1 on pin*/
		SET_BIT(PORTD,(PinNum-PIN24));
 1fc:	82 e3       	ldi	r24, 0x32	; 50
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	22 e3       	ldi	r18, 0x32	; 50
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	62 2f       	mov	r22, r18
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	22 2f       	mov	r18, r18
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	48 51       	subi	r20, 0x18	; 24
 214:	51 09       	sbc	r21, r1
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0x18e>
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	4a 95       	dec	r20
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0x18a>
 224:	26 2b       	or	r18, r22
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
	else
	{
		
	}

}
 22a:	19 c0       	rjmp	.+50     	; 0x25e <DIO_WritePin+0x1cc>
		if(PinValue)
		/*write 1 on pin*/
		SET_BIT(PORTD,(PinNum-PIN24));
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTD,(PinNum-PIN24));
 22c:	82 e3       	ldi	r24, 0x32	; 50
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	22 e3       	ldi	r18, 0x32	; 50
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	62 2f       	mov	r22, r18
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	22 2f       	mov	r18, r18
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	a9 01       	movw	r20, r18
 242:	48 51       	subi	r20, 0x18	; 24
 244:	51 09       	sbc	r21, r1
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_WritePin+0x1be>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	4a 95       	dec	r20
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_WritePin+0x1ba>
 254:	20 95       	com	r18
 256:	26 23       	and	r18, r22
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
	else
	{
		
	}

}
 25c:	00 c0       	rjmp	.+0      	; 0x25e <DIO_WritePin+0x1cc>
 25e:	00 00       	nop
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	89 83       	std	Y+1, r24	; 0x01
	/*check PORTA PINS from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7) )
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	d8 f4       	brcc	.+54     	; 0x2b2 <DIO_ReadPin+0x48>
		/*Read PIN from PORTA*/
		return(GET_BIT(PINA,PinNum));
 27c:	89 e3       	ldi	r24, 0x39	; 57
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	28 2f       	mov	r18, r24
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	48 2f       	mov	r20, r24
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_ReadPin+0x2e>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	4a 95       	dec	r20
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_ReadPin+0x2a>
 29c:	82 23       	and	r24, r18
 29e:	93 23       	and	r25, r19
 2a0:	29 81       	ldd	r18, Y+1	; 0x01
 2a2:	22 2f       	mov	r18, r18
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_ReadPin+0x42>
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	2a 95       	dec	r18
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_ReadPin+0x3e>
 2b0:	73 c0       	rjmp	.+230    	; 0x398 <DIO_ReadPin+0x12e>
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15) )
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	18 f1       	brcs	.+70     	; 0x2fe <DIO_ReadPin+0x94>
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	80 31       	cpi	r24, 0x10	; 16
 2bc:	00 f5       	brcc	.+64     	; 0x2fe <DIO_ReadPin+0x94>
		/*Read PIN from PORTB*/
		return(GET_BIT(PINB,(PinNum-PIN8)));
 2be:	86 e3       	ldi	r24, 0x36	; 54
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	48 50       	subi	r20, 0x08	; 8
 2d4:	51 09       	sbc	r21, r1
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_ReadPin+0x76>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	4a 95       	dec	r20
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_ReadPin+0x72>
 2e4:	82 23       	and	r24, r18
 2e6:	93 23       	and	r25, r19
 2e8:	29 81       	ldd	r18, Y+1	; 0x01
 2ea:	22 2f       	mov	r18, r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	28 50       	subi	r18, 0x08	; 8
 2f0:	31 09       	sbc	r19, r1
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_ReadPin+0x8e>
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	2a 95       	dec	r18
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_ReadPin+0x8a>
 2fc:	4d c0       	rjmp	.+154    	; 0x398 <DIO_ReadPin+0x12e>
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23) )
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	80 31       	cpi	r24, 0x10	; 16
 302:	18 f1       	brcs	.+70     	; 0x34a <DIO_ReadPin+0xe0>
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 31       	cpi	r24, 0x18	; 24
 308:	00 f5       	brcc	.+64     	; 0x34a <DIO_ReadPin+0xe0>
		/*Read PIN from PORTC*/
		return(GET_BIT(PINC,(PinNum-PIN16)));
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	40 51       	subi	r20, 0x10	; 16
 320:	51 09       	sbc	r21, r1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_ReadPin+0xc2>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_ReadPin+0xbe>
 330:	82 23       	and	r24, r18
 332:	93 23       	and	r25, r19
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	22 2f       	mov	r18, r18
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	20 51       	subi	r18, 0x10	; 16
 33c:	31 09       	sbc	r19, r1
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_ReadPin+0xda>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	2a 95       	dec	r18
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_ReadPin+0xd6>
 348:	27 c0       	rjmp	.+78     	; 0x398 <DIO_ReadPin+0x12e>
	/*check PORTD PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31) )
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	88 31       	cpi	r24, 0x18	; 24
 34e:	18 f1       	brcs	.+70     	; 0x396 <DIO_ReadPin+0x12c>
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	80 32       	cpi	r24, 0x20	; 32
 354:	00 f5       	brcc	.+64     	; 0x396 <DIO_ReadPin+0x12c>
		/*Read PIN from PORTD*/
		return(GET_BIT(PIND,(PinNum-PIN24)));
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	48 51       	subi	r20, 0x18	; 24
 36c:	51 09       	sbc	r21, r1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_ReadPin+0x10e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	4a 95       	dec	r20
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_ReadPin+0x10a>
 37c:	82 23       	and	r24, r18
 37e:	93 23       	and	r25, r19
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	22 2f       	mov	r18, r18
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	28 51       	subi	r18, 0x18	; 24
 388:	31 09       	sbc	r19, r1
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_ReadPin+0x126>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	2a 95       	dec	r18
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_ReadPin+0x122>
 394:	01 c0       	rjmp	.+2      	; 0x398 <DIO_ReadPin+0x12e>
	else
		return 0;
 396:	80 e0       	ldi	r24, 0x00	; 0
}
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <DIO_SetPinDirection+0x6>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	6a 83       	std	Y+2, r22	; 0x02
	/*check PORTA PINa from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7))
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	70 f5       	brcc	.+92     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		if(PinDirection)
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	88 23       	and	r24, r24
 3b8:	a9 f0       	breq	.+42     	; 0x3e4 <DIO_SetPinDirection+0x44>
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
 3ba:	8a e3       	ldi	r24, 0x3A	; 58
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	2a e3       	ldi	r18, 0x3A	; 58
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	f9 01       	movw	r30, r18
 3c4:	20 81       	ld	r18, Z
 3c6:	62 2f       	mov	r22, r18
 3c8:	29 81       	ldd	r18, Y+1	; 0x01
 3ca:	42 2f       	mov	r20, r18
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_SetPinDirection+0x38>
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	4a 95       	dec	r20
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_SetPinDirection+0x34>
 3dc:	26 2b       	or	r18, r22
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 3e2:	c4 c0       	rjmp	.+392    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		if(PinDirection)
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
 3e4:	8a e3       	ldi	r24, 0x3A	; 58
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2a e3       	ldi	r18, 0x3A	; 58
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	62 2f       	mov	r22, r18
 3f2:	29 81       	ldd	r18, Y+1	; 0x01
 3f4:	42 2f       	mov	r20, r18
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	4a 95       	dec	r20
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_SetPinDirection+0x5e>
 406:	20 95       	com	r18
 408:	26 23       	and	r18, r22
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 40e:	ae c0       	rjmp	.+348    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	b8 f1       	brcs	.+110    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	80 31       	cpi	r24, 0x10	; 16
 41a:	a0 f5       	brcc	.+104    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{
		if(PinDirection)
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	88 23       	and	r24, r24
 420:	c1 f0       	breq	.+48     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
 422:	87 e3       	ldi	r24, 0x37	; 55
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	27 e3       	ldi	r18, 0x37	; 55
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	62 2f       	mov	r22, r18
 430:	29 81       	ldd	r18, Y+1	; 0x01
 432:	22 2f       	mov	r18, r18
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	a9 01       	movw	r20, r18
 438:	48 50       	subi	r20, 0x08	; 8
 43a:	51 09       	sbc	r21, r1
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	4a 95       	dec	r20
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	26 2b       	or	r18, r22
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinDirection)
 450:	8d c0       	rjmp	.+282    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
 452:	87 e3       	ldi	r24, 0x37	; 55
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	27 e3       	ldi	r18, 0x37	; 55
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	62 2f       	mov	r22, r18
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	22 2f       	mov	r18, r18
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	a9 01       	movw	r20, r18
 468:	48 50       	subi	r20, 0x08	; 8
 46a:	51 09       	sbc	r21, r1
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	4a 95       	dec	r20
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	20 95       	com	r18
 47c:	26 23       	and	r18, r22
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinDirection)
 482:	74 c0       	rjmp	.+232    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	80 31       	cpi	r24, 0x10	; 16
 488:	b8 f1       	brcs	.+110    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 31       	cpi	r24, 0x18	; 24
 48e:	a0 f5       	brcc	.+104    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	{
		if(PinDirection)
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	88 23       	and	r24, r24
 494:	c1 f0       	breq	.+48     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
 496:	84 e3       	ldi	r24, 0x34	; 52
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	24 e3       	ldi	r18, 0x34	; 52
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	f9 01       	movw	r30, r18
 4a0:	20 81       	ld	r18, Z
 4a2:	62 2f       	mov	r22, r18
 4a4:	29 81       	ldd	r18, Y+1	; 0x01
 4a6:	22 2f       	mov	r18, r18
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	a9 01       	movw	r20, r18
 4ac:	40 51       	subi	r20, 0x10	; 16
 4ae:	51 09       	sbc	r21, r1
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	4a 95       	dec	r20
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	26 2b       	or	r18, r22
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinDirection)
 4c4:	53 c0       	rjmp	.+166    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
 4c6:	84 e3       	ldi	r24, 0x34	; 52
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	24 e3       	ldi	r18, 0x34	; 52
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	62 2f       	mov	r22, r18
 4d4:	29 81       	ldd	r18, Y+1	; 0x01
 4d6:	22 2f       	mov	r18, r18
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	a9 01       	movw	r20, r18
 4dc:	40 51       	subi	r20, 0x10	; 16
 4de:	51 09       	sbc	r21, r1
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	4a 95       	dec	r20
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ee:	20 95       	com	r18
 4f0:	26 23       	and	r18, r22
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinDirection)
 4f6:	3a c0       	rjmp	.+116    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
	}	
	/*check PORTA PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31))
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	88 31       	cpi	r24, 0x18	; 24
 4fc:	b8 f1       	brcs	.+110    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	80 32       	cpi	r24, 0x20	; 32
 502:	a0 f5       	brcc	.+104    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
	{
		if(PinDirection)
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	88 23       	and	r24, r24
 508:	c1 f0       	breq	.+48     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
 50a:	81 e3       	ldi	r24, 0x31	; 49
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	21 e3       	ldi	r18, 0x31	; 49
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	20 81       	ld	r18, Z
 516:	62 2f       	mov	r22, r18
 518:	29 81       	ldd	r18, Y+1	; 0x01
 51a:	22 2f       	mov	r18, r18
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	48 51       	subi	r20, 0x18	; 24
 522:	51 09       	sbc	r21, r1
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52a:	22 0f       	add	r18, r18
 52c:	33 1f       	adc	r19, r19
 52e:	4a 95       	dec	r20
 530:	e2 f7       	brpl	.-8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 532:	26 2b       	or	r18, r22
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 538:	19 c0       	rjmp	.+50     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		if(PinDirection)
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
		else
		/*SET PIN in PORTD as input*/
		CLEAR_BIT(DDRD,(PinNum-PIN24));
 53a:	81 e3       	ldi	r24, 0x31	; 49
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	21 e3       	ldi	r18, 0x31	; 49
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	f9 01       	movw	r30, r18
 544:	20 81       	ld	r18, Z
 546:	62 2f       	mov	r22, r18
 548:	29 81       	ldd	r18, Y+1	; 0x01
 54a:	22 2f       	mov	r18, r18
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	a9 01       	movw	r20, r18
 550:	48 51       	subi	r20, 0x18	; 24
 552:	51 09       	sbc	r21, r1
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	4a 95       	dec	r20
 560:	e2 f7       	brpl	.-8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 562:	20 95       	com	r18
 564:	26 23       	and	r18, r22
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 56a:	00 c0       	rjmp	.+0      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56c:	00 00       	nop
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <main>:
#include "timer.h"

#define Task_Num 4

int main(void)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	ac 97       	sbiw	r28, 0x2c	; 44
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
	/*Set the Port initialization*/
	Init_Tasks	();
 58c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Init_Tasks>
	
	
	/*Initialize The scheduler*/
	schedulerInit(Task_Num);
 590:	64 e0       	ldi	r22, 0x04	; 4
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 b0 03 	call	0x760	; 0x760 <schedulerInit>
	
	/*initialize structures data*/
	Tasks Task0 = {Led0_Task,1000,1000,1};
 59c:	2b e0       	ldi	r18, 0x0B	; 11
 59e:	e0 e6       	ldi	r30, 0x60	; 96
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	dc 01       	movw	r26, r24
 5a8:	01 90       	ld	r0, Z+
 5aa:	0d 92       	st	X+, r0
 5ac:	2a 95       	dec	r18
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x30>
	Tasks Task1 = {Led1_Task,2000,2000,0};
 5b0:	8b e0       	ldi	r24, 0x0B	; 11
 5b2:	eb e6       	ldi	r30, 0x6B	; 107
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	de 01       	movw	r26, r28
 5b8:	1c 96       	adiw	r26, 0x0c	; 12
 5ba:	01 90       	ld	r0, Z+
 5bc:	0d 92       	st	X+, r0
 5be:	8a 95       	dec	r24
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0x42>
	Tasks Task2 = {Led2_Task,3000,3000,2};
 5c2:	8b e0       	ldi	r24, 0x0B	; 11
 5c4:	e6 e7       	ldi	r30, 0x76	; 118
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	de 01       	movw	r26, r28
 5ca:	57 96       	adiw	r26, 0x17	; 23
 5cc:	01 90       	ld	r0, Z+
 5ce:	0d 92       	st	X+, r0
 5d0:	8a 95       	dec	r24
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x54>
	Tasks Task3 = {Led3_Task,4000,4000,3};
 5d4:	8b e0       	ldi	r24, 0x0B	; 11
 5d6:	e1 e8       	ldi	r30, 0x81	; 129
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	de 01       	movw	r26, r28
 5dc:	92 96       	adiw	r26, 0x22	; 34
 5de:	01 90       	ld	r0, Z+
 5e0:	0d 92       	st	X+, r0
 5e2:	8a 95       	dec	r24
 5e4:	e1 f7       	brne	.-8      	; 0x5de <main+0x66>
	
	/*Check if there the task is added or not*/
	if (scheduler_Add_Task(&Task0))
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
	}
	else
	{
		/*No place to add Task*/
	}
	scheduler_Add_Task(&Task1);
 5ee:	ce 01       	movw	r24, r28
 5f0:	0c 96       	adiw	r24, 0x0c	; 12
 5f2:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
	scheduler_Add_Task(&Task2);
 5f6:	ce 01       	movw	r24, r28
 5f8:	47 96       	adiw	r24, 0x17	; 23
 5fa:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
	scheduler_Add_Task(&Task3);
 5fe:	ce 01       	movw	r24, r28
 600:	82 96       	adiw	r24, 0x22	; 34
 602:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>

	/*Start the OS scheduler*/
	schedulerStart();
 606:	0e 94 2d 04 	call	0x85a	; 0x85a <schedulerStart>
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
	
	
}
 60e:	ac 96       	adiw	r28, 0x2c	; 44
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	de bf       	out	0x3e, r29	; 62
 616:	0f be       	out	0x3f, r0	; 63
 618:	cd bf       	out	0x3d, r28	; 61
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <scheduler_Add_Task>:
*Return: Nothing
*Description: This Function extend the array with the new task
**************************************************************/

uint8 scheduler_Add_Task(Tasks *S_ptr)
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	00 d0       	rcall	.+0      	; 0x626 <scheduler_Add_Task+0x6>
 626:	1f 92       	push	r1
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	9b 83       	std	Y+3, r25	; 0x03
 62e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ret = TRUE;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	89 83       	std	Y+1, r24	; 0x01
	if (global_index < MAX_TASK_NUMBER)
 634:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 638:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 63c:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 640:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 644:	84 36       	cpi	r24, 0x64	; 100
 646:	91 05       	cpc	r25, r1
 648:	a1 05       	cpc	r26, r1
 64a:	b1 05       	cpc	r27, r1
 64c:	08 f0       	brcs	.+2      	; 0x650 <scheduler_Add_Task+0x30>
 64e:	80 c0       	rjmp	.+256    	; 0x750 <scheduler_Add_Task+0x130>
	{
		Tasks_Arr[global_index].ptr_func = S_ptr->ptr_func;
 650:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 654:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 658:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 65c:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 660:	2a 81       	ldd	r18, Y+2	; 0x02
 662:	3b 81       	ldd	r19, Y+3	; 0x03
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	31 81       	ldd	r19, Z+1	; 0x01
 66a:	ac 01       	movw	r20, r24
 66c:	6b e0       	ldi	r22, 0x0B	; 11
 66e:	64 9f       	mul	r22, r20
 670:	c0 01       	movw	r24, r0
 672:	65 9f       	mul	r22, r21
 674:	90 0d       	add	r25, r0
 676:	11 24       	eor	r1, r1
 678:	8f 56       	subi	r24, 0x6F	; 111
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	fc 01       	movw	r30, r24
 67e:	31 83       	std	Z+1, r19	; 0x01
 680:	20 83       	st	Z, r18
		Tasks_Arr[global_index].Task_Periodicity = S_ptr->Task_Periodicity;
 682:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <global_index>
 686:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <global_index+0x1>
 68a:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <global_index+0x2>
 68e:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <global_index+0x3>
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	9b 81       	ldd	r25, Y+3	; 0x03
 696:	fc 01       	movw	r30, r24
 698:	82 81       	ldd	r24, Z+2	; 0x02
 69a:	93 81       	ldd	r25, Z+3	; 0x03
 69c:	a4 81       	ldd	r26, Z+4	; 0x04
 69e:	b5 81       	ldd	r27, Z+5	; 0x05
 6a0:	a9 01       	movw	r20, r18
 6a2:	6b e0       	ldi	r22, 0x0B	; 11
 6a4:	64 9f       	mul	r22, r20
 6a6:	90 01       	movw	r18, r0
 6a8:	65 9f       	mul	r22, r21
 6aa:	30 0d       	add	r19, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	2d 56       	subi	r18, 0x6D	; 109
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	f9 01       	movw	r30, r18
 6b4:	80 83       	st	Z, r24
 6b6:	91 83       	std	Z+1, r25	; 0x01
 6b8:	a2 83       	std	Z+2, r26	; 0x02
 6ba:	b3 83       	std	Z+3, r27	; 0x03
		Tasks_Arr[global_index].Remaining_Ticks = S_ptr->Remaining_Ticks;
 6bc:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <global_index>
 6c0:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <global_index+0x1>
 6c4:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <global_index+0x2>
 6c8:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <global_index+0x3>
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	9b 81       	ldd	r25, Y+3	; 0x03
 6d0:	fc 01       	movw	r30, r24
 6d2:	86 81       	ldd	r24, Z+6	; 0x06
 6d4:	97 81       	ldd	r25, Z+7	; 0x07
 6d6:	a0 85       	ldd	r26, Z+8	; 0x08
 6d8:	b1 85       	ldd	r27, Z+9	; 0x09
 6da:	a9 01       	movw	r20, r18
 6dc:	6b e0       	ldi	r22, 0x0B	; 11
 6de:	64 9f       	mul	r22, r20
 6e0:	90 01       	movw	r18, r0
 6e2:	65 9f       	mul	r22, r21
 6e4:	30 0d       	add	r19, r0
 6e6:	11 24       	eor	r1, r1
 6e8:	29 56       	subi	r18, 0x69	; 105
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	f9 01       	movw	r30, r18
 6ee:	80 83       	st	Z, r24
 6f0:	91 83       	std	Z+1, r25	; 0x01
 6f2:	a2 83       	std	Z+2, r26	; 0x02
 6f4:	b3 83       	std	Z+3, r27	; 0x03
		Tasks_Arr[global_index].Piriority = S_ptr->Piriority;
 6f6:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 6fa:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 6fe:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 702:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 706:	2a 81       	ldd	r18, Y+2	; 0x02
 708:	3b 81       	ldd	r19, Y+3	; 0x03
 70a:	f9 01       	movw	r30, r18
 70c:	42 85       	ldd	r20, Z+10	; 0x0a
 70e:	9c 01       	movw	r18, r24
 710:	5b e0       	ldi	r21, 0x0B	; 11
 712:	52 9f       	mul	r21, r18
 714:	c0 01       	movw	r24, r0
 716:	53 9f       	mul	r21, r19
 718:	90 0d       	add	r25, r0
 71a:	11 24       	eor	r1, r1
 71c:	85 56       	subi	r24, 0x65	; 101
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	fc 01       	movw	r30, r24
 722:	40 83       	st	Z, r20
		
		global_index++;
 724:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 728:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 72c:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 730:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	a1 1d       	adc	r26, r1
 738:	b1 1d       	adc	r27, r1
 73a:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <global_index>
 73e:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <global_index+0x1>
 742:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <global_index+0x2>
 746:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <global_index+0x3>
		
		/*Sort the array*/
		ret = TRUE;
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	89 83       	std	Y+1, r24	; 0x01
 74e:	01 c0       	rjmp	.+2      	; 0x752 <scheduler_Add_Task+0x132>
	}
	else
	{
		ret = FALSE;
 750:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
 752:	89 81       	ldd	r24, Y+1	; 0x01
}
 754:	0f 90       	pop	r0
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <schedulerInit>:
*Description: This Function set the periodicity of each task
			  and calculate the remaining ticks
**************************************************************/

void schedulerInit(uint32 Task_Num)
{
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
 768:	28 97       	sbiw	r28, 0x08	; 8
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	f8 94       	cli
 76e:	de bf       	out	0x3e, r29	; 62
 770:	0f be       	out	0x3f, r0	; 63
 772:	cd bf       	out	0x3d, r28	; 61
 774:	6d 83       	std	Y+5, r22	; 0x05
 776:	7e 83       	std	Y+6, r23	; 0x06
 778:	8f 83       	std	Y+7, r24	; 0x07
 77a:	98 87       	std	Y+8, r25	; 0x08
	task_num = Task_Num;
 77c:	8d 81       	ldd	r24, Y+5	; 0x05
 77e:	9e 81       	ldd	r25, Y+6	; 0x06
 780:	af 81       	ldd	r26, Y+7	; 0x07
 782:	b8 85       	ldd	r27, Y+8	; 0x08
 784:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <task_num>
 788:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <task_num+0x1>
 78c:	a0 93 df 04 	sts	0x04DF, r26	; 0x8004df <task_num+0x2>
 790:	b0 93 e0 04 	sts	0x04E0, r27	; 0x8004e0 <task_num+0x3>
	uint32 index_1 = INITIAL;
 794:	19 82       	std	Y+1, r1	; 0x01
 796:	1a 82       	std	Y+2, r1	; 0x02
 798:	1b 82       	std	Y+3, r1	; 0x03
 79a:	1c 82       	std	Y+4, r1	; 0x04
	for (index_1=INITIAL;index_1<Task_Num;index_1++)
 79c:	19 82       	std	Y+1, r1	; 0x01
 79e:	1a 82       	std	Y+2, r1	; 0x02
 7a0:	1b 82       	std	Y+3, r1	; 0x03
 7a2:	1c 82       	std	Y+4, r1	; 0x04
 7a4:	42 c0       	rjmp	.+132    	; 0x82a <schedulerInit+0xca>
	{
		Tasks_Arr[index_1].ptr_func = NULL;
 7a6:	29 81       	ldd	r18, Y+1	; 0x01
 7a8:	3a 81       	ldd	r19, Y+2	; 0x02
 7aa:	4b e0       	ldi	r20, 0x0B	; 11
 7ac:	42 9f       	mul	r20, r18
 7ae:	c0 01       	movw	r24, r0
 7b0:	43 9f       	mul	r20, r19
 7b2:	90 0d       	add	r25, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	8f 56       	subi	r24, 0x6F	; 111
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	fc 01       	movw	r30, r24
 7bc:	11 82       	std	Z+1, r1	; 0x01
 7be:	10 82       	st	Z, r1
		Tasks_Arr[index_1].Task_Periodicity = INITIAL;
 7c0:	29 81       	ldd	r18, Y+1	; 0x01
 7c2:	3a 81       	ldd	r19, Y+2	; 0x02
 7c4:	4b e0       	ldi	r20, 0x0B	; 11
 7c6:	42 9f       	mul	r20, r18
 7c8:	c0 01       	movw	r24, r0
 7ca:	43 9f       	mul	r20, r19
 7cc:	90 0d       	add	r25, r0
 7ce:	11 24       	eor	r1, r1
 7d0:	8d 56       	subi	r24, 0x6D	; 109
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	fc 01       	movw	r30, r24
 7d6:	10 82       	st	Z, r1
 7d8:	11 82       	std	Z+1, r1	; 0x01
 7da:	12 82       	std	Z+2, r1	; 0x02
 7dc:	13 82       	std	Z+3, r1	; 0x03
		Tasks_Arr[index_1].Remaining_Ticks = INITIAL;
 7de:	29 81       	ldd	r18, Y+1	; 0x01
 7e0:	3a 81       	ldd	r19, Y+2	; 0x02
 7e2:	4b e0       	ldi	r20, 0x0B	; 11
 7e4:	42 9f       	mul	r20, r18
 7e6:	c0 01       	movw	r24, r0
 7e8:	43 9f       	mul	r20, r19
 7ea:	90 0d       	add	r25, r0
 7ec:	11 24       	eor	r1, r1
 7ee:	89 56       	subi	r24, 0x69	; 105
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	fc 01       	movw	r30, r24
 7f4:	10 82       	st	Z, r1
 7f6:	11 82       	std	Z+1, r1	; 0x01
 7f8:	12 82       	std	Z+2, r1	; 0x02
 7fa:	13 82       	std	Z+3, r1	; 0x03
		Tasks_Arr[index_1].Piriority = INITIAL;
 7fc:	29 81       	ldd	r18, Y+1	; 0x01
 7fe:	3a 81       	ldd	r19, Y+2	; 0x02
 800:	4b e0       	ldi	r20, 0x0B	; 11
 802:	42 9f       	mul	r20, r18
 804:	c0 01       	movw	r24, r0
 806:	43 9f       	mul	r20, r19
 808:	90 0d       	add	r25, r0
 80a:	11 24       	eor	r1, r1
 80c:	85 56       	subi	r24, 0x65	; 101
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	fc 01       	movw	r30, r24
 812:	10 82       	st	Z, r1

void schedulerInit(uint32 Task_Num)
{
	task_num = Task_Num;
	uint32 index_1 = INITIAL;
	for (index_1=INITIAL;index_1<Task_Num;index_1++)
 814:	89 81       	ldd	r24, Y+1	; 0x01
 816:	9a 81       	ldd	r25, Y+2	; 0x02
 818:	ab 81       	ldd	r26, Y+3	; 0x03
 81a:	bc 81       	ldd	r27, Y+4	; 0x04
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	a1 1d       	adc	r26, r1
 820:	b1 1d       	adc	r27, r1
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	9a 83       	std	Y+2, r25	; 0x02
 826:	ab 83       	std	Y+3, r26	; 0x03
 828:	bc 83       	std	Y+4, r27	; 0x04
 82a:	29 81       	ldd	r18, Y+1	; 0x01
 82c:	3a 81       	ldd	r19, Y+2	; 0x02
 82e:	4b 81       	ldd	r20, Y+3	; 0x03
 830:	5c 81       	ldd	r21, Y+4	; 0x04
 832:	8d 81       	ldd	r24, Y+5	; 0x05
 834:	9e 81       	ldd	r25, Y+6	; 0x06
 836:	af 81       	ldd	r26, Y+7	; 0x07
 838:	b8 85       	ldd	r27, Y+8	; 0x08
 83a:	28 17       	cp	r18, r24
 83c:	39 07       	cpc	r19, r25
 83e:	4a 07       	cpc	r20, r26
 840:	5b 07       	cpc	r21, r27
 842:	08 f4       	brcc	.+2      	; 0x846 <schedulerInit+0xe6>
 844:	b0 cf       	rjmp	.-160    	; 0x7a6 <schedulerInit+0x46>
		Tasks_Arr[index_1].ptr_func = NULL;
		Tasks_Arr[index_1].Task_Periodicity = INITIAL;
		Tasks_Arr[index_1].Remaining_Ticks = INITIAL;
		Tasks_Arr[index_1].Piriority = INITIAL;
	}
}
 846:	00 00       	nop
 848:	28 96       	adiw	r28, 0x08	; 8
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	08 95       	ret

0000085a <schedulerStart>:
*Return: Nothing
*Description: This Function Starts the OS scheduler 
**************************************************************/

void schedulerStart()
{
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
	/*Sort the array of task based on priorities*/
	sorting ();
 862:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sorting>
	/*initialize the timer*/
	timer_init();
 866:	0e 94 15 06 	call	0xc2a	; 0xc2a <timer_init>
	/*call the set flag function based on ISR using call back mechanism*/
	set_call_back(set_flag);
 86a:	8a ec       	ldi	r24, 0xCA	; 202
 86c:	94 e0       	ldi	r25, 0x04	; 4
 86e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <set_call_back>
	while(TRUE)
	{
		if(flag==ONE)
 872:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	e1 f7       	brne	.-8      	; 0x872 <__stack+0x13>
		{
			flag=ZERO;
 87a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
			/*Call the TCC Scheduler*/
			TTC_Scheduler();
 87e:	0e 94 42 04 	call	0x884	; 0x884 <TTC_Scheduler>
		}
	}
 882:	f7 cf       	rjmp	.-18     	; 0x872 <__stack+0x13>

00000884 <TTC_Scheduler>:
*Return: Nothing
*Description: This Function has the Algorithm that choose which
			  task to be executed
**************************************************************/
void TTC_Scheduler(void)
{
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	1f 92       	push	r1
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
	uint8 i = ZERO;
 88e:	19 82       	std	Y+1, r1	; 0x01
	for (i = ZERO; i<global_index;i++)
 890:	19 82       	std	Y+1, r1	; 0x01
 892:	68 c0       	rjmp	.+208    	; 0x964 <TTC_Scheduler+0xe0>
	{
		Tasks_Arr[i].Remaining_Ticks--;
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	28 2f       	mov	r18, r24
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	4b e0       	ldi	r20, 0x0B	; 11
 89c:	42 9f       	mul	r20, r18
 89e:	c0 01       	movw	r24, r0
 8a0:	43 9f       	mul	r20, r19
 8a2:	90 0d       	add	r25, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	89 56       	subi	r24, 0x69	; 105
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	fc 01       	movw	r30, r24
 8ac:	80 81       	ld	r24, Z
 8ae:	91 81       	ldd	r25, Z+1	; 0x01
 8b0:	a2 81       	ldd	r26, Z+2	; 0x02
 8b2:	b3 81       	ldd	r27, Z+3	; 0x03
 8b4:	01 97       	sbiw	r24, 0x01	; 1
 8b6:	a1 09       	sbc	r26, r1
 8b8:	b1 09       	sbc	r27, r1
 8ba:	6b e0       	ldi	r22, 0x0B	; 11
 8bc:	62 9f       	mul	r22, r18
 8be:	a0 01       	movw	r20, r0
 8c0:	63 9f       	mul	r22, r19
 8c2:	50 0d       	add	r21, r0
 8c4:	11 24       	eor	r1, r1
 8c6:	9a 01       	movw	r18, r20
 8c8:	29 56       	subi	r18, 0x69	; 105
 8ca:	3f 4f       	sbci	r19, 0xFF	; 255
 8cc:	f9 01       	movw	r30, r18
 8ce:	80 83       	st	Z, r24
 8d0:	91 83       	std	Z+1, r25	; 0x01
 8d2:	a2 83       	std	Z+2, r26	; 0x02
 8d4:	b3 83       	std	Z+3, r27	; 0x03
		if(Tasks_Arr[i].Remaining_Ticks==ZERO)
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	28 2f       	mov	r18, r24
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	4b e0       	ldi	r20, 0x0B	; 11
 8de:	42 9f       	mul	r20, r18
 8e0:	c0 01       	movw	r24, r0
 8e2:	43 9f       	mul	r20, r19
 8e4:	90 0d       	add	r25, r0
 8e6:	11 24       	eor	r1, r1
 8e8:	89 56       	subi	r24, 0x69	; 105
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	fc 01       	movw	r30, r24
 8ee:	80 81       	ld	r24, Z
 8f0:	91 81       	ldd	r25, Z+1	; 0x01
 8f2:	a2 81       	ldd	r26, Z+2	; 0x02
 8f4:	b3 81       	ldd	r27, Z+3	; 0x03
 8f6:	89 2b       	or	r24, r25
 8f8:	8a 2b       	or	r24, r26
 8fa:	8b 2b       	or	r24, r27
 8fc:	81 f5       	brne	.+96     	; 0x95e <TTC_Scheduler+0xda>
		{
			Tasks_Arr[i].ptr_func();
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	4b e0       	ldi	r20, 0x0B	; 11
 906:	42 9f       	mul	r20, r18
 908:	c0 01       	movw	r24, r0
 90a:	43 9f       	mul	r20, r19
 90c:	90 0d       	add	r25, r0
 90e:	11 24       	eor	r1, r1
 910:	8f 56       	subi	r24, 0x6F	; 111
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	fc 01       	movw	r30, r24
 916:	80 81       	ld	r24, Z
 918:	91 81       	ldd	r25, Z+1	; 0x01
 91a:	fc 01       	movw	r30, r24
 91c:	09 95       	icall
			Tasks_Arr[i].Remaining_Ticks = Tasks_Arr[i].Task_Periodicity;
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	48 2f       	mov	r20, r24
 922:	50 e0       	ldi	r21, 0x00	; 0
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	28 2f       	mov	r18, r24
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	6b e0       	ldi	r22, 0x0B	; 11
 92c:	62 9f       	mul	r22, r18
 92e:	c0 01       	movw	r24, r0
 930:	63 9f       	mul	r22, r19
 932:	90 0d       	add	r25, r0
 934:	11 24       	eor	r1, r1
 936:	8d 56       	subi	r24, 0x6D	; 109
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	fc 01       	movw	r30, r24
 93c:	80 81       	ld	r24, Z
 93e:	91 81       	ldd	r25, Z+1	; 0x01
 940:	a2 81       	ldd	r26, Z+2	; 0x02
 942:	b3 81       	ldd	r27, Z+3	; 0x03
 944:	6b e0       	ldi	r22, 0x0B	; 11
 946:	64 9f       	mul	r22, r20
 948:	90 01       	movw	r18, r0
 94a:	65 9f       	mul	r22, r21
 94c:	30 0d       	add	r19, r0
 94e:	11 24       	eor	r1, r1
 950:	29 56       	subi	r18, 0x69	; 105
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	f9 01       	movw	r30, r18
 956:	80 83       	st	Z, r24
 958:	91 83       	std	Z+1, r25	; 0x01
 95a:	a2 83       	std	Z+2, r26	; 0x02
 95c:	b3 83       	std	Z+3, r27	; 0x03
			  task to be executed
**************************************************************/
void TTC_Scheduler(void)
{
	uint8 i = ZERO;
	for (i = ZERO; i<global_index;i++)
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	8f 5f       	subi	r24, 0xFF	; 255
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 972:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 976:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 97a:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 97e:	28 17       	cp	r18, r24
 980:	39 07       	cpc	r19, r25
 982:	4a 07       	cpc	r20, r26
 984:	5b 07       	cpc	r21, r27
 986:	08 f4       	brcc	.+2      	; 0x98a <TTC_Scheduler+0x106>
 988:	85 cf       	rjmp	.-246    	; 0x894 <TTC_Scheduler+0x10>
			Tasks_Arr[i].ptr_func();
			Tasks_Arr[i].Remaining_Ticks = Tasks_Arr[i].Task_Periodicity;
			
		}
	}
}
 98a:	00 00       	nop
 98c:	0f 90       	pop	r0
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	08 95       	ret

00000994 <set_flag>:
*Return: Nothing
*Description: This Function Set flag to High When After 
			  ISR execution
**************************************************************/
void set_flag(void)
{
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	cd b7       	in	r28, 0x3d	; 61
 99a:	de b7       	in	r29, 0x3e	; 62
	flag = ONE;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
}
 9a2:	00 00       	nop
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <sorting>:
*			I/O: NOTHING
*Return: Nothing
*Description: This Function sort an array of structs
**************************************************************/
static void sorting ()
{
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	63 97       	sbiw	r28, 0x13	; 19
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
	uint32 counter1 = INITIAL, counter2 = INITIAL;
 9be:	19 82       	std	Y+1, r1	; 0x01
 9c0:	1a 82       	std	Y+2, r1	; 0x02
 9c2:	1b 82       	std	Y+3, r1	; 0x03
 9c4:	1c 82       	std	Y+4, r1	; 0x04
 9c6:	1d 82       	std	Y+5, r1	; 0x05
 9c8:	1e 82       	std	Y+6, r1	; 0x06
 9ca:	1f 82       	std	Y+7, r1	; 0x07
 9cc:	18 86       	std	Y+8, r1	; 0x08
	Tasks temp;
	for(counter1 = INITIAL; counter1 < task_num; counter1++)
 9ce:	19 82       	std	Y+1, r1	; 0x01
 9d0:	1a 82       	std	Y+2, r1	; 0x02
 9d2:	1b 82       	std	Y+3, r1	; 0x03
 9d4:	1c 82       	std	Y+4, r1	; 0x04
 9d6:	9d c0       	rjmp	.+314    	; 0xb12 <sorting+0x168>
	{
		for (counter2 = ONE; counter2 < task_num; counter2++)
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	a0 e0       	ldi	r26, 0x00	; 0
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	8d 83       	std	Y+5, r24	; 0x05
 9e2:	9e 83       	std	Y+6, r25	; 0x06
 9e4:	af 83       	std	Y+7, r26	; 0x07
 9e6:	b8 87       	std	Y+8, r27	; 0x08
 9e8:	77 c0       	rjmp	.+238    	; 0xad8 <sorting+0x12e>
		{
			if (Tasks_Arr[counter2].Piriority < Tasks_Arr[counter2-ONE].Piriority)
 9ea:	2d 81       	ldd	r18, Y+5	; 0x05
 9ec:	3e 81       	ldd	r19, Y+6	; 0x06
 9ee:	4b e0       	ldi	r20, 0x0B	; 11
 9f0:	42 9f       	mul	r20, r18
 9f2:	c0 01       	movw	r24, r0
 9f4:	43 9f       	mul	r20, r19
 9f6:	90 0d       	add	r25, r0
 9f8:	11 24       	eor	r1, r1
 9fa:	85 56       	subi	r24, 0x65	; 101
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	fc 01       	movw	r30, r24
 a00:	40 81       	ld	r20, Z
 a02:	8d 81       	ldd	r24, Y+5	; 0x05
 a04:	9e 81       	ldd	r25, Y+6	; 0x06
 a06:	af 81       	ldd	r26, Y+7	; 0x07
 a08:	b8 85       	ldd	r27, Y+8	; 0x08
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	a1 09       	sbc	r26, r1
 a0e:	b1 09       	sbc	r27, r1
 a10:	9c 01       	movw	r18, r24
 a12:	5b e0       	ldi	r21, 0x0B	; 11
 a14:	52 9f       	mul	r21, r18
 a16:	c0 01       	movw	r24, r0
 a18:	53 9f       	mul	r21, r19
 a1a:	90 0d       	add	r25, r0
 a1c:	11 24       	eor	r1, r1
 a1e:	85 56       	subi	r24, 0x65	; 101
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	fc 01       	movw	r30, r24
 a24:	80 81       	ld	r24, Z
 a26:	48 17       	cp	r20, r24
 a28:	08 f0       	brcs	.+2      	; 0xa2c <sorting+0x82>
 a2a:	4b c0       	rjmp	.+150    	; 0xac2 <sorting+0x118>
			{
				temp = Tasks_Arr[counter2];
 a2c:	2d 81       	ldd	r18, Y+5	; 0x05
 a2e:	3e 81       	ldd	r19, Y+6	; 0x06
 a30:	4b e0       	ldi	r20, 0x0B	; 11
 a32:	42 9f       	mul	r20, r18
 a34:	c0 01       	movw	r24, r0
 a36:	43 9f       	mul	r20, r19
 a38:	90 0d       	add	r25, r0
 a3a:	11 24       	eor	r1, r1
 a3c:	8f 56       	subi	r24, 0x6F	; 111
 a3e:	9f 4f       	sbci	r25, 0xFF	; 255
 a40:	2b e0       	ldi	r18, 0x0B	; 11
 a42:	fc 01       	movw	r30, r24
 a44:	de 01       	movw	r26, r28
 a46:	19 96       	adiw	r26, 0x09	; 9
 a48:	01 90       	ld	r0, Z+
 a4a:	0d 92       	st	X+, r0
 a4c:	2a 95       	dec	r18
 a4e:	e1 f7       	brne	.-8      	; 0xa48 <sorting+0x9e>
				Tasks_Arr[counter2] = Tasks_Arr[counter2-ONE];
 a50:	8d 81       	ldd	r24, Y+5	; 0x05
 a52:	9e 81       	ldd	r25, Y+6	; 0x06
 a54:	af 81       	ldd	r26, Y+7	; 0x07
 a56:	b8 85       	ldd	r27, Y+8	; 0x08
 a58:	01 97       	sbiw	r24, 0x01	; 1
 a5a:	a1 09       	sbc	r26, r1
 a5c:	b1 09       	sbc	r27, r1
 a5e:	4d 81       	ldd	r20, Y+5	; 0x05
 a60:	5e 81       	ldd	r21, Y+6	; 0x06
 a62:	6b e0       	ldi	r22, 0x0B	; 11
 a64:	64 9f       	mul	r22, r20
 a66:	90 01       	movw	r18, r0
 a68:	65 9f       	mul	r22, r21
 a6a:	30 0d       	add	r19, r0
 a6c:	11 24       	eor	r1, r1
 a6e:	2f 56       	subi	r18, 0x6F	; 111
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	ac 01       	movw	r20, r24
 a74:	6b e0       	ldi	r22, 0x0B	; 11
 a76:	64 9f       	mul	r22, r20
 a78:	c0 01       	movw	r24, r0
 a7a:	65 9f       	mul	r22, r21
 a7c:	90 0d       	add	r25, r0
 a7e:	11 24       	eor	r1, r1
 a80:	8f 56       	subi	r24, 0x6F	; 111
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	4b e0       	ldi	r20, 0x0B	; 11
 a86:	fc 01       	movw	r30, r24
 a88:	d9 01       	movw	r26, r18
 a8a:	01 90       	ld	r0, Z+
 a8c:	0d 92       	st	X+, r0
 a8e:	4a 95       	dec	r20
 a90:	e1 f7       	brne	.-8      	; 0xa8a <sorting+0xe0>
				Tasks_Arr[counter2-ONE] = temp;
 a92:	8d 81       	ldd	r24, Y+5	; 0x05
 a94:	9e 81       	ldd	r25, Y+6	; 0x06
 a96:	af 81       	ldd	r26, Y+7	; 0x07
 a98:	b8 85       	ldd	r27, Y+8	; 0x08
 a9a:	01 97       	sbiw	r24, 0x01	; 1
 a9c:	a1 09       	sbc	r26, r1
 a9e:	b1 09       	sbc	r27, r1
 aa0:	9c 01       	movw	r18, r24
 aa2:	4b e0       	ldi	r20, 0x0B	; 11
 aa4:	42 9f       	mul	r20, r18
 aa6:	c0 01       	movw	r24, r0
 aa8:	43 9f       	mul	r20, r19
 aaa:	90 0d       	add	r25, r0
 aac:	11 24       	eor	r1, r1
 aae:	8f 56       	subi	r24, 0x6F	; 111
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	2b e0       	ldi	r18, 0x0B	; 11
 ab4:	fe 01       	movw	r30, r28
 ab6:	39 96       	adiw	r30, 0x09	; 9
 ab8:	dc 01       	movw	r26, r24
 aba:	01 90       	ld	r0, Z+
 abc:	0d 92       	st	X+, r0
 abe:	2a 95       	dec	r18
 ac0:	e1 f7       	brne	.-8      	; 0xaba <sorting+0x110>
{
	uint32 counter1 = INITIAL, counter2 = INITIAL;
	Tasks temp;
	for(counter1 = INITIAL; counter1 < task_num; counter1++)
	{
		for (counter2 = ONE; counter2 < task_num; counter2++)
 ac2:	8d 81       	ldd	r24, Y+5	; 0x05
 ac4:	9e 81       	ldd	r25, Y+6	; 0x06
 ac6:	af 81       	ldd	r26, Y+7	; 0x07
 ac8:	b8 85       	ldd	r27, Y+8	; 0x08
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	a1 1d       	adc	r26, r1
 ace:	b1 1d       	adc	r27, r1
 ad0:	8d 83       	std	Y+5, r24	; 0x05
 ad2:	9e 83       	std	Y+6, r25	; 0x06
 ad4:	af 83       	std	Y+7, r26	; 0x07
 ad6:	b8 87       	std	Y+8, r27	; 0x08
 ad8:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <task_num>
 adc:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <task_num+0x1>
 ae0:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <task_num+0x2>
 ae4:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <task_num+0x3>
 ae8:	2d 81       	ldd	r18, Y+5	; 0x05
 aea:	3e 81       	ldd	r19, Y+6	; 0x06
 aec:	4f 81       	ldd	r20, Y+7	; 0x07
 aee:	58 85       	ldd	r21, Y+8	; 0x08
 af0:	28 17       	cp	r18, r24
 af2:	39 07       	cpc	r19, r25
 af4:	4a 07       	cpc	r20, r26
 af6:	5b 07       	cpc	r21, r27
 af8:	08 f4       	brcc	.+2      	; 0xafc <sorting+0x152>
 afa:	77 cf       	rjmp	.-274    	; 0x9ea <sorting+0x40>
**************************************************************/
static void sorting ()
{
	uint32 counter1 = INITIAL, counter2 = INITIAL;
	Tasks temp;
	for(counter1 = INITIAL; counter1 < task_num; counter1++)
 afc:	89 81       	ldd	r24, Y+1	; 0x01
 afe:	9a 81       	ldd	r25, Y+2	; 0x02
 b00:	ab 81       	ldd	r26, Y+3	; 0x03
 b02:	bc 81       	ldd	r27, Y+4	; 0x04
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	a1 1d       	adc	r26, r1
 b08:	b1 1d       	adc	r27, r1
 b0a:	89 83       	std	Y+1, r24	; 0x01
 b0c:	9a 83       	std	Y+2, r25	; 0x02
 b0e:	ab 83       	std	Y+3, r26	; 0x03
 b10:	bc 83       	std	Y+4, r27	; 0x04
 b12:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <task_num>
 b16:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <task_num+0x1>
 b1a:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <task_num+0x2>
 b1e:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <task_num+0x3>
 b22:	29 81       	ldd	r18, Y+1	; 0x01
 b24:	3a 81       	ldd	r19, Y+2	; 0x02
 b26:	4b 81       	ldd	r20, Y+3	; 0x03
 b28:	5c 81       	ldd	r21, Y+4	; 0x04
 b2a:	28 17       	cp	r18, r24
 b2c:	39 07       	cpc	r19, r25
 b2e:	4a 07       	cpc	r20, r26
 b30:	5b 07       	cpc	r21, r27
 b32:	08 f4       	brcc	.+2      	; 0xb36 <sorting+0x18c>
 b34:	51 cf       	rjmp	.-350    	; 0x9d8 <sorting+0x2e>
				/*Nothing to do*/
			}
		}
	}
	
 b36:	00 00       	nop
 b38:	63 96       	adiw	r28, 0x13	; 19
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	f8 94       	cli
 b3e:	de bf       	out	0x3e, r29	; 62
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	cd bf       	out	0x3d, r28	; 61
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	08 95       	ret

00000b4a <Init_Tasks>:
*			I/O: NOTHING
*Return: Nothing
*Description: Function to Set LED0
**************************************************************/
void Init_Tasks(void)
{
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	cd b7       	in	r28, 0x3d	; 61
 b50:	de b7       	in	r29, 0x3e	; 62
		DIO_SetPinDirection(LED0,HIGH);
 b52:	61 e0       	ldi	r22, 0x01	; 1
 b54:	8c e0       	ldi	r24, 0x0C	; 12
 b56:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LED1,HIGH);
 b5a:	61 e0       	ldi	r22, 0x01	; 1
 b5c:	8d e0       	ldi	r24, 0x0D	; 13
 b5e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LED2,HIGH);
 b62:	61 e0       	ldi	r22, 0x01	; 1
 b64:	8e e0       	ldi	r24, 0x0E	; 14
 b66:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LED3,HIGH);
 b6a:	61 e0       	ldi	r22, 0x01	; 1
 b6c:	8f e0       	ldi	r24, 0x0F	; 15
 b6e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
}
 b72:	00 00       	nop
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	08 95       	ret

00000b7a <Led0_Task>:
*			I/O: NOTHING
*Return: Nothing
*Description: Function to Set LED0
**************************************************************/
void Led0_Task(void)
{
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
		if(DIO_ReadPin(LED0))
 b82:	8c e0       	ldi	r24, 0x0C	; 12
 b84:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 b88:	88 23       	and	r24, r24
 b8a:	29 f0       	breq	.+10     	; 0xb96 <Led0_Task+0x1c>
		{
			DIO_WritePin(LED0,LOW);
 b8c:	60 e0       	ldi	r22, 0x00	; 0
 b8e:	8c e0       	ldi	r24, 0x0C	; 12
 b90:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		}
		else
		{
			DIO_WritePin(LED0,HIGH);
		}
}
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <Led0_Task+0x24>
		{
			DIO_WritePin(LED0,LOW);
		}
		else
		{
			DIO_WritePin(LED0,HIGH);
 b96:	61 e0       	ldi	r22, 0x01	; 1
 b98:	8c e0       	ldi	r24, 0x0C	; 12
 b9a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		}
}
 b9e:	00 00       	nop
 ba0:	df 91       	pop	r29
 ba2:	cf 91       	pop	r28
 ba4:	08 95       	ret

00000ba6 <Led1_Task>:
*			I/O: NOTHING
*Return: Nothing
*Description: Function to Set LED1
**************************************************************/
void Led1_Task()
{
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62

		if(DIO_ReadPin(LED1))
 bae:	8d e0       	ldi	r24, 0x0D	; 13
 bb0:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 bb4:	88 23       	and	r24, r24
 bb6:	29 f0       	breq	.+10     	; 0xbc2 <Led1_Task+0x1c>
		{
			DIO_WritePin(LED1,LOW);
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	8d e0       	ldi	r24, 0x0D	; 13
 bbc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		}
		else
		{
			DIO_WritePin(LED1,HIGH);
		}
}
 bc0:	04 c0       	rjmp	.+8      	; 0xbca <Led1_Task+0x24>
		{
			DIO_WritePin(LED1,LOW);
		}
		else
		{
			DIO_WritePin(LED1,HIGH);
 bc2:	61 e0       	ldi	r22, 0x01	; 1
 bc4:	8d e0       	ldi	r24, 0x0D	; 13
 bc6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		}
}
 bca:	00 00       	nop
 bcc:	df 91       	pop	r29
 bce:	cf 91       	pop	r28
 bd0:	08 95       	ret

00000bd2 <Led2_Task>:
*			I/O: NOTHING
*Return: Nothing
*Description: Function to Set LED2
**************************************************************/
void Led2_Task()
{
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED2))
 bda:	8e e0       	ldi	r24, 0x0E	; 14
 bdc:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 be0:	88 23       	and	r24, r24
 be2:	29 f0       	breq	.+10     	; 0xbee <Led2_Task+0x1c>
	{
		DIO_WritePin(LED2,LOW);
 be4:	60 e0       	ldi	r22, 0x00	; 0
 be6:	8e e0       	ldi	r24, 0x0E	; 14
 be8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	}
	else
	{
		DIO_WritePin(LED2,HIGH);
	}
}
 bec:	04 c0       	rjmp	.+8      	; 0xbf6 <Led2_Task+0x24>
	{
		DIO_WritePin(LED2,LOW);
	}
	else
	{
		DIO_WritePin(LED2,HIGH);
 bee:	61 e0       	ldi	r22, 0x01	; 1
 bf0:	8e e0       	ldi	r24, 0x0E	; 14
 bf2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	}
}
 bf6:	00 00       	nop
 bf8:	df 91       	pop	r29
 bfa:	cf 91       	pop	r28
 bfc:	08 95       	ret

00000bfe <Led3_Task>:
*			I/O: NOTHING
*Return: Nothing
*Description: Function to Set LED3
**************************************************************/
void Led3_Task()
{
 bfe:	cf 93       	push	r28
 c00:	df 93       	push	r29
 c02:	cd b7       	in	r28, 0x3d	; 61
 c04:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED3))
 c06:	8f e0       	ldi	r24, 0x0F	; 15
 c08:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 c0c:	88 23       	and	r24, r24
 c0e:	29 f0       	breq	.+10     	; 0xc1a <Led3_Task+0x1c>
	{
		DIO_WritePin(LED3,LOW);
 c10:	60 e0       	ldi	r22, 0x00	; 0
 c12:	8f e0       	ldi	r24, 0x0F	; 15
 c14:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	}
	else
	{
		DIO_WritePin(LED3,HIGH);
	}
 c18:	04 c0       	rjmp	.+8      	; 0xc22 <Led3_Task+0x24>
	{
		DIO_WritePin(LED3,LOW);
	}
	else
	{
		DIO_WritePin(LED3,HIGH);
 c1a:	61 e0       	ldi	r22, 0x01	; 1
 c1c:	8f e0       	ldi	r24, 0x0F	; 15
 c1e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	}
 c22:	00 00       	nop
 c24:	df 91       	pop	r29
 c26:	cf 91       	pop	r28
 c28:	08 95       	ret

00000c2a <timer_init>:
*Return: Nothing
*Description: This function Initialize timer-1 by 1 ms
**************************************************************/

void timer_init()
{
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	cd b7       	in	r28, 0x3d	; 61
 c30:	de b7       	in	r29, 0x3e	; 62
	/*Timer1 CTC MODE (MODE-4)*/
	CLEAR_BIT(TCCR1A,WGM10);
 c32:	8f e4       	ldi	r24, 0x4F	; 79
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	2f e4       	ldi	r18, 0x4F	; 79
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	f9 01       	movw	r30, r18
 c3c:	20 81       	ld	r18, Z
 c3e:	2e 7f       	andi	r18, 0xFE	; 254
 c40:	fc 01       	movw	r30, r24
 c42:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1A,WGM11);
 c44:	8f e4       	ldi	r24, 0x4F	; 79
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	2f e4       	ldi	r18, 0x4F	; 79
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	f9 01       	movw	r30, r18
 c4e:	20 81       	ld	r18, Z
 c50:	2d 7f       	andi	r18, 0xFD	; 253
 c52:	fc 01       	movw	r30, r24
 c54:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM12);
 c56:	8e e4       	ldi	r24, 0x4E	; 78
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	2e e4       	ldi	r18, 0x4E	; 78
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	f9 01       	movw	r30, r18
 c60:	20 81       	ld	r18, Z
 c62:	28 60       	ori	r18, 0x08	; 8
 c64:	fc 01       	movw	r30, r24
 c66:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B,WGM13);
 c68:	8e e4       	ldi	r24, 0x4E	; 78
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	2e e4       	ldi	r18, 0x4E	; 78
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	f9 01       	movw	r30, r18
 c72:	20 81       	ld	r18, Z
 c74:	2f 7e       	andi	r18, 0xEF	; 239
 c76:	fc 01       	movw	r30, r24
 c78:	20 83       	st	Z, r18
	
	/*set OCR = 16000*/
	OCR1AH = Compare_Value >> SHIFT_EIGHT;
 c7a:	8b e4       	ldi	r24, 0x4B	; 75
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	2e e3       	ldi	r18, 0x3E	; 62
 c80:	fc 01       	movw	r30, r24
 c82:	20 83       	st	Z, r18
	OCR1AL = Compare_Value & LOW_MASK;
 c84:	8a e4       	ldi	r24, 0x4A	; 74
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	20 e8       	ldi	r18, 0x80	; 128
 c8a:	fc 01       	movw	r30, r24
 c8c:	20 83       	st	Z, r18
	
	/*Set prescalar =1*/
	SET_BIT(TCCR1B,CS10);
 c8e:	8e e4       	ldi	r24, 0x4E	; 78
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	2e e4       	ldi	r18, 0x4E	; 78
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	f9 01       	movw	r30, r18
 c98:	20 81       	ld	r18, Z
 c9a:	21 60       	ori	r18, 0x01	; 1
 c9c:	fc 01       	movw	r30, r24
 c9e:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B,CS11);
 ca0:	8e e4       	ldi	r24, 0x4E	; 78
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	2e e4       	ldi	r18, 0x4E	; 78
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	f9 01       	movw	r30, r18
 caa:	20 81       	ld	r18, Z
 cac:	2d 7f       	andi	r18, 0xFD	; 253
 cae:	fc 01       	movw	r30, r24
 cb0:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B,CS12);
 cb2:	8e e4       	ldi	r24, 0x4E	; 78
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	2e e4       	ldi	r18, 0x4E	; 78
 cb8:	30 e0       	ldi	r19, 0x00	; 0
 cba:	f9 01       	movw	r30, r18
 cbc:	20 81       	ld	r18, Z
 cbe:	2b 7f       	andi	r18, 0xFB	; 251
 cc0:	fc 01       	movw	r30, r24
 cc2:	20 83       	st	Z, r18
	
	/*enable global interrupt */
	SET_BIT(SREG_INTERRUPT,I);
 cc4:	8f e5       	ldi	r24, 0x5F	; 95
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	2f e5       	ldi	r18, 0x5F	; 95
 cca:	30 e0       	ldi	r19, 0x00	; 0
 ccc:	f9 01       	movw	r30, r18
 cce:	20 81       	ld	r18, Z
 cd0:	20 68       	ori	r18, 0x80	; 128
 cd2:	fc 01       	movw	r30, r24
 cd4:	20 83       	st	Z, r18
	
	/*set timer CTC flag */
	SET_BIT(TIMER_TIMSK,OCIE1A);
 cd6:	89 e5       	ldi	r24, 0x59	; 89
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	29 e5       	ldi	r18, 0x59	; 89
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	f9 01       	movw	r30, r18
 ce0:	20 81       	ld	r18, Z
 ce2:	20 61       	ori	r18, 0x10	; 16
 ce4:	fc 01       	movw	r30, r24
 ce6:	20 83       	st	Z, r18
}
 ce8:	00 00       	nop
 cea:	df 91       	pop	r29
 cec:	cf 91       	pop	r28
 cee:	08 95       	ret

00000cf0 <set_call_back>:
*Return: Nothing
*Description: This function sets call back pointer to function
			  to equal the input pointer to function
**************************************************************/
void set_call_back(void(*ptr)(void))
{
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	00 d0       	rcall	.+0      	; 0xcf6 <set_call_back+0x6>
 cf6:	cd b7       	in	r28, 0x3d	; 61
 cf8:	de b7       	in	r29, 0x3e	; 62
 cfa:	9a 83       	std	Y+2, r25	; 0x02
 cfc:	89 83       	std	Y+1, r24	; 0x01
	call_back=ptr;
 cfe:	89 81       	ldd	r24, Y+1	; 0x01
 d00:	9a 81       	ldd	r25, Y+2	; 0x02
 d02:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <call_back+0x1>
 d06:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <call_back>
}
 d0a:	00 00       	nop
 d0c:	0f 90       	pop	r0
 d0e:	0f 90       	pop	r0
 d10:	df 91       	pop	r29
 d12:	cf 91       	pop	r28
 d14:	08 95       	ret

00000d16 <__vector_7>:

/* The ISR of CTC INT of Timer-1 */
ISR(TIMER1_COMPA_vect)
{
 d16:	1f 92       	push	r1
 d18:	0f 92       	push	r0
 d1a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 d1e:	0f 92       	push	r0
 d20:	11 24       	eor	r1, r1
 d22:	2f 93       	push	r18
 d24:	3f 93       	push	r19
 d26:	4f 93       	push	r20
 d28:	5f 93       	push	r21
 d2a:	6f 93       	push	r22
 d2c:	7f 93       	push	r23
 d2e:	8f 93       	push	r24
 d30:	9f 93       	push	r25
 d32:	af 93       	push	r26
 d34:	bf 93       	push	r27
 d36:	ef 93       	push	r30
 d38:	ff 93       	push	r31
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	cd b7       	in	r28, 0x3d	; 61
 d40:	de b7       	in	r29, 0x3e	; 62
		call_back();
 d42:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <call_back>
 d46:	90 91 e2 04 	lds	r25, 0x04E2	; 0x8004e2 <call_back+0x1>
 d4a:	fc 01       	movw	r30, r24
 d4c:	09 95       	icall
 d4e:	00 00       	nop
 d50:	df 91       	pop	r29
 d52:	cf 91       	pop	r28
 d54:	ff 91       	pop	r31
 d56:	ef 91       	pop	r30
 d58:	bf 91       	pop	r27
 d5a:	af 91       	pop	r26
 d5c:	9f 91       	pop	r25
 d5e:	8f 91       	pop	r24
 d60:	7f 91       	pop	r23
 d62:	6f 91       	pop	r22
 d64:	5f 91       	pop	r21
 d66:	4f 91       	pop	r20
 d68:	3f 91       	pop	r19
 d6a:	2f 91       	pop	r18
 d6c:	0f 90       	pop	r0
 d6e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 d72:	0f 90       	pop	r0
 d74:	1f 90       	pop	r1
 d76:	18 95       	reti

00000d78 <_exit>:
 d78:	f8 94       	cli

00000d7a <__stop_program>:
 d7a:	ff cf       	rjmp	.-2      	; 0xd7a <__stop_program>

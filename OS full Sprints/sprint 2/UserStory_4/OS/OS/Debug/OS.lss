
OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000dee  00000e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  0080008c  0080008c  00000eae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4a  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00001c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d1  00000000  00000000  0000251b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00002dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000589  00000000  00000000  0000363a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  8a:	0c 94 f5 06 	jmp	0xdea	; 0xdea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
#include "DIO_cfg.h"
#include "DIO.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
	/*check PORTA PINS from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7))
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	70 f5       	brcc	.+92     	; 0x102 <DIO_WritePin+0x70>
	{
		if(PinValue )
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 23       	and	r24, r24
  aa:	a9 f0       	breq	.+42     	; 0xd6 <DIO_WritePin+0x44>
			/*write 1 on pin*/
			 SET_BIT(PORTA,PinNum);
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	62 2f       	mov	r22, r18
  ba:	29 81       	ldd	r18, Y+1	; 0x01
  bc:	42 2f       	mov	r20, r18
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WritePin+0x38>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	4a 95       	dec	r20
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WritePin+0x34>
  ce:	26 2b       	or	r18, r22
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	else
	{
		
	}

}
  d4:	c4 c0       	rjmp	.+392    	; 0x25e <DIO_WritePin+0x1cc>
		if(PinValue )
			/*write 1 on pin*/
			 SET_BIT(PORTA,PinNum);
		else
			/*write 0 on pin*/
			CLEAR_BIT(PORTA,PinNum);
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	62 2f       	mov	r22, r18
  e4:	29 81       	ldd	r18, Y+1	; 0x01
  e6:	42 2f       	mov	r20, r18
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_WritePin+0x62>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	4a 95       	dec	r20
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_WritePin+0x5e>
  f8:	20 95       	com	r18
  fa:	26 23       	and	r18, r22
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	else
	{
		
	}

}
 100:	ae c0       	rjmp	.+348    	; 0x25e <DIO_WritePin+0x1cc>
		else
			/*write 0 on pin*/
			CLEAR_BIT(PORTA,PinNum);
	}
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	b8 f1       	brcs	.+110    	; 0x176 <DIO_WritePin+0xe4>
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	80 31       	cpi	r24, 0x10	; 16
 10c:	a0 f5       	brcc	.+104    	; 0x176 <DIO_WritePin+0xe4>
	{
		if(PinValue)
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	88 23       	and	r24, r24
 112:	c1 f0       	breq	.+48     	; 0x144 <DIO_WritePin+0xb2>
		/*write 1 on pin*/
		SET_BIT(PORTB,(PinNum-PIN8));
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	28 e3       	ldi	r18, 0x38	; 56
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	62 2f       	mov	r22, r18
 122:	29 81       	ldd	r18, Y+1	; 0x01
 124:	22 2f       	mov	r18, r18
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	48 50       	subi	r20, 0x08	; 8
 12c:	51 09       	sbc	r21, r1
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_WritePin+0xa6>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	4a 95       	dec	r20
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_WritePin+0xa2>
 13c:	26 2b       	or	r18, r22
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
			CLEAR_BIT(PORTA,PinNum);
	}
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinValue)
 142:	8d c0       	rjmp	.+282    	; 0x25e <DIO_WritePin+0x1cc>
		/*write 1 on pin*/
		SET_BIT(PORTB,(PinNum-PIN8));
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTB,(PinNum-PIN8));
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	28 e3       	ldi	r18, 0x38	; 56
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	62 2f       	mov	r22, r18
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	22 2f       	mov	r18, r18
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	a9 01       	movw	r20, r18
 15a:	48 50       	subi	r20, 0x08	; 8
 15c:	51 09       	sbc	r21, r1
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_WritePin+0xd6>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	4a 95       	dec	r20
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_WritePin+0xd2>
 16c:	20 95       	com	r18
 16e:	26 23       	and	r18, r22
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
			CLEAR_BIT(PORTA,PinNum);
	}
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinValue)
 174:	74 c0       	rjmp	.+232    	; 0x25e <DIO_WritePin+0x1cc>
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTB,(PinNum-PIN8));
	}
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	80 31       	cpi	r24, 0x10	; 16
 17a:	b8 f1       	brcs	.+110    	; 0x1ea <DIO_WritePin+0x158>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	a0 f5       	brcc	.+104    	; 0x1ea <DIO_WritePin+0x158>
	{
		if(PinValue)
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	88 23       	and	r24, r24
 186:	c1 f0       	breq	.+48     	; 0x1b8 <DIO_WritePin+0x126>
		/*write 1 on pin*/
		SET_BIT(PORTC,(PinNum-PIN16));
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 e3       	ldi	r18, 0x35	; 53
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	62 2f       	mov	r22, r18
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	22 2f       	mov	r18, r18
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	a9 01       	movw	r20, r18
 19e:	40 51       	subi	r20, 0x10	; 16
 1a0:	51 09       	sbc	r21, r1
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePin+0x11a>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	4a 95       	dec	r20
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePin+0x116>
 1b0:	26 2b       	or	r18, r22
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB,(PinNum-PIN8));
	}
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinValue)
 1b6:	53 c0       	rjmp	.+166    	; 0x25e <DIO_WritePin+0x1cc>
		/*write 1 on pin*/
		SET_BIT(PORTC,(PinNum-PIN16));
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTC,(PinNum-PIN16));
 1b8:	85 e3       	ldi	r24, 0x35	; 53
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	25 e3       	ldi	r18, 0x35	; 53
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	62 2f       	mov	r22, r18
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	22 2f       	mov	r18, r18
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	a9 01       	movw	r20, r18
 1ce:	40 51       	subi	r20, 0x10	; 16
 1d0:	51 09       	sbc	r21, r1
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_WritePin+0x14a>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	4a 95       	dec	r20
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_WritePin+0x146>
 1e0:	20 95       	com	r18
 1e2:	26 23       	and	r18, r22
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB,(PinNum-PIN8));
	}
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinValue)
 1e8:	3a c0       	rjmp	.+116    	; 0x25e <DIO_WritePin+0x1cc>
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTC,(PinNum-PIN16));
	}	
	/*check PORTD PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31))
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 31       	cpi	r24, 0x18	; 24
 1ee:	b8 f1       	brcs	.+110    	; 0x25e <DIO_WritePin+0x1cc>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	80 32       	cpi	r24, 0x20	; 32
 1f4:	a0 f5       	brcc	.+104    	; 0x25e <DIO_WritePin+0x1cc>
	{
		if(PinValue)
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	88 23       	and	r24, r24
 1fa:	c1 f0       	breq	.+48     	; 0x22c <DIO_WritePin+0x19a>
		/*write 1 on pin*/
		SET_BIT(PORTD,(PinNum-PIN24));
 1fc:	82 e3       	ldi	r24, 0x32	; 50
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	22 e3       	ldi	r18, 0x32	; 50
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	62 2f       	mov	r22, r18
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	22 2f       	mov	r18, r18
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	48 51       	subi	r20, 0x18	; 24
 214:	51 09       	sbc	r21, r1
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0x18e>
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	4a 95       	dec	r20
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0x18a>
 224:	26 2b       	or	r18, r22
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
	else
	{
		
	}

}
 22a:	19 c0       	rjmp	.+50     	; 0x25e <DIO_WritePin+0x1cc>
		if(PinValue)
		/*write 1 on pin*/
		SET_BIT(PORTD,(PinNum-PIN24));
		else
		/*write 0 on pin*/
		CLEAR_BIT(PORTD,(PinNum-PIN24));
 22c:	82 e3       	ldi	r24, 0x32	; 50
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	22 e3       	ldi	r18, 0x32	; 50
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	62 2f       	mov	r22, r18
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	22 2f       	mov	r18, r18
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	a9 01       	movw	r20, r18
 242:	48 51       	subi	r20, 0x18	; 24
 244:	51 09       	sbc	r21, r1
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_WritePin+0x1be>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	4a 95       	dec	r20
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_WritePin+0x1ba>
 254:	20 95       	com	r18
 256:	26 23       	and	r18, r22
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
	else
	{
		
	}

}
 25c:	00 c0       	rjmp	.+0      	; 0x25e <DIO_WritePin+0x1cc>
 25e:	00 00       	nop
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	89 83       	std	Y+1, r24	; 0x01
	/*check PORTA PINS from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7) )
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	d8 f4       	brcc	.+54     	; 0x2b2 <DIO_ReadPin+0x48>
		/*Read PIN from PORTA*/
		return(GET_BIT(PINA,PinNum));
 27c:	89 e3       	ldi	r24, 0x39	; 57
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	28 2f       	mov	r18, r24
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	48 2f       	mov	r20, r24
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_ReadPin+0x2e>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	4a 95       	dec	r20
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_ReadPin+0x2a>
 29c:	82 23       	and	r24, r18
 29e:	93 23       	and	r25, r19
 2a0:	29 81       	ldd	r18, Y+1	; 0x01
 2a2:	22 2f       	mov	r18, r18
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_ReadPin+0x42>
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	2a 95       	dec	r18
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_ReadPin+0x3e>
 2b0:	73 c0       	rjmp	.+230    	; 0x398 <DIO_ReadPin+0x12e>
	/*check PORTB PINS from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15) )
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	18 f1       	brcs	.+70     	; 0x2fe <DIO_ReadPin+0x94>
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	80 31       	cpi	r24, 0x10	; 16
 2bc:	00 f5       	brcc	.+64     	; 0x2fe <DIO_ReadPin+0x94>
		/*Read PIN from PORTB*/
		return(GET_BIT(PINB,(PinNum-PIN8)));
 2be:	86 e3       	ldi	r24, 0x36	; 54
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	48 50       	subi	r20, 0x08	; 8
 2d4:	51 09       	sbc	r21, r1
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_ReadPin+0x76>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	4a 95       	dec	r20
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_ReadPin+0x72>
 2e4:	82 23       	and	r24, r18
 2e6:	93 23       	and	r25, r19
 2e8:	29 81       	ldd	r18, Y+1	; 0x01
 2ea:	22 2f       	mov	r18, r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	28 50       	subi	r18, 0x08	; 8
 2f0:	31 09       	sbc	r19, r1
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_ReadPin+0x8e>
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	2a 95       	dec	r18
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_ReadPin+0x8a>
 2fc:	4d c0       	rjmp	.+154    	; 0x398 <DIO_ReadPin+0x12e>
	/*check PORTC PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23) )
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	80 31       	cpi	r24, 0x10	; 16
 302:	18 f1       	brcs	.+70     	; 0x34a <DIO_ReadPin+0xe0>
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 31       	cpi	r24, 0x18	; 24
 308:	00 f5       	brcc	.+64     	; 0x34a <DIO_ReadPin+0xe0>
		/*Read PIN from PORTC*/
		return(GET_BIT(PINC,(PinNum-PIN16)));
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	40 51       	subi	r20, 0x10	; 16
 320:	51 09       	sbc	r21, r1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_ReadPin+0xc2>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_ReadPin+0xbe>
 330:	82 23       	and	r24, r18
 332:	93 23       	and	r25, r19
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	22 2f       	mov	r18, r18
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	20 51       	subi	r18, 0x10	; 16
 33c:	31 09       	sbc	r19, r1
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_ReadPin+0xda>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	2a 95       	dec	r18
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_ReadPin+0xd6>
 348:	27 c0       	rjmp	.+78     	; 0x398 <DIO_ReadPin+0x12e>
	/*check PORTD PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31) )
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	88 31       	cpi	r24, 0x18	; 24
 34e:	18 f1       	brcs	.+70     	; 0x396 <DIO_ReadPin+0x12c>
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	80 32       	cpi	r24, 0x20	; 32
 354:	00 f5       	brcc	.+64     	; 0x396 <DIO_ReadPin+0x12c>
		/*Read PIN from PORTD*/
		return(GET_BIT(PIND,(PinNum-PIN24)));
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	48 51       	subi	r20, 0x18	; 24
 36c:	51 09       	sbc	r21, r1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_ReadPin+0x10e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	4a 95       	dec	r20
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_ReadPin+0x10a>
 37c:	82 23       	and	r24, r18
 37e:	93 23       	and	r25, r19
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	22 2f       	mov	r18, r18
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	28 51       	subi	r18, 0x18	; 24
 388:	31 09       	sbc	r19, r1
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_ReadPin+0x126>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	2a 95       	dec	r18
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_ReadPin+0x122>
 394:	01 c0       	rjmp	.+2      	; 0x398 <DIO_ReadPin+0x12e>
	else
		return 0;
 396:	80 e0       	ldi	r24, 0x00	; 0
}
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <DIO_SetPinDirection+0x6>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	6a 83       	std	Y+2, r22	; 0x02
	/*check PORTA PINa from pin0 to pin7 */
	if ((PinNum >=PIN0) && (PinNum <=PIN7))
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	70 f5       	brcc	.+92     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		if(PinDirection)
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	88 23       	and	r24, r24
 3b8:	a9 f0       	breq	.+42     	; 0x3e4 <DIO_SetPinDirection+0x44>
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
 3ba:	8a e3       	ldi	r24, 0x3A	; 58
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	2a e3       	ldi	r18, 0x3A	; 58
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	f9 01       	movw	r30, r18
 3c4:	20 81       	ld	r18, Z
 3c6:	62 2f       	mov	r22, r18
 3c8:	29 81       	ldd	r18, Y+1	; 0x01
 3ca:	42 2f       	mov	r20, r18
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_SetPinDirection+0x38>
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	4a 95       	dec	r20
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_SetPinDirection+0x34>
 3dc:	26 2b       	or	r18, r22
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 3e2:	c4 c0       	rjmp	.+392    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		if(PinDirection)
			/*SET PIN in PORTA as output*/
			SET_BIT(DDRA,PinNum);
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
 3e4:	8a e3       	ldi	r24, 0x3A	; 58
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2a e3       	ldi	r18, 0x3A	; 58
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	62 2f       	mov	r22, r18
 3f2:	29 81       	ldd	r18, Y+1	; 0x01
 3f4:	42 2f       	mov	r20, r18
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	4a 95       	dec	r20
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_SetPinDirection+0x5e>
 406:	20 95       	com	r18
 408:	26 23       	and	r18, r22
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 40e:	ae c0       	rjmp	.+348    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		else
			/*SET PIN in PORTA as input*/
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	b8 f1       	brcs	.+110    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	80 31       	cpi	r24, 0x10	; 16
 41a:	a0 f5       	brcc	.+104    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{
		if(PinDirection)
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	88 23       	and	r24, r24
 420:	c1 f0       	breq	.+48     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
 422:	87 e3       	ldi	r24, 0x37	; 55
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	27 e3       	ldi	r18, 0x37	; 55
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	62 2f       	mov	r22, r18
 430:	29 81       	ldd	r18, Y+1	; 0x01
 432:	22 2f       	mov	r18, r18
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	a9 01       	movw	r20, r18
 438:	48 50       	subi	r20, 0x08	; 8
 43a:	51 09       	sbc	r21, r1
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	4a 95       	dec	r20
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	26 2b       	or	r18, r22
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinDirection)
 450:	8d c0       	rjmp	.+282    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		/*SET PIN in PORTB as output*/
		SET_BIT(DDRB,(PinNum-PIN8));
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
 452:	87 e3       	ldi	r24, 0x37	; 55
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	27 e3       	ldi	r18, 0x37	; 55
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	62 2f       	mov	r22, r18
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	22 2f       	mov	r18, r18
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	a9 01       	movw	r20, r18
 468:	48 50       	subi	r20, 0x08	; 8
 46a:	51 09       	sbc	r21, r1
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	4a 95       	dec	r20
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	20 95       	com	r18
 47c:	26 23       	and	r18, r22
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
			CLEAR_BIT(DDRA,PinNum);
	}
	/*check PORTB PINa from pin8 to pin15 */
	else if ((PinNum >=PIN8) && (PinNum <=PIN15))
	{
		if(PinDirection)
 482:	74 c0       	rjmp	.+232    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		else
		/*SET PIN in PORTB as input*/
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	80 31       	cpi	r24, 0x10	; 16
 488:	b8 f1       	brcs	.+110    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 31       	cpi	r24, 0x18	; 24
 48e:	a0 f5       	brcc	.+104    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	{
		if(PinDirection)
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	88 23       	and	r24, r24
 494:	c1 f0       	breq	.+48     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
 496:	84 e3       	ldi	r24, 0x34	; 52
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	24 e3       	ldi	r18, 0x34	; 52
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	f9 01       	movw	r30, r18
 4a0:	20 81       	ld	r18, Z
 4a2:	62 2f       	mov	r22, r18
 4a4:	29 81       	ldd	r18, Y+1	; 0x01
 4a6:	22 2f       	mov	r18, r18
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	a9 01       	movw	r20, r18
 4ac:	40 51       	subi	r20, 0x10	; 16
 4ae:	51 09       	sbc	r21, r1
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	4a 95       	dec	r20
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	26 2b       	or	r18, r22
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinDirection)
 4c4:	53 c0       	rjmp	.+166    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		/*SET PIN in PORTC as output*/
		SET_BIT(DDRC,(PinNum-PIN16));
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
 4c6:	84 e3       	ldi	r24, 0x34	; 52
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	24 e3       	ldi	r18, 0x34	; 52
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	62 2f       	mov	r22, r18
 4d4:	29 81       	ldd	r18, Y+1	; 0x01
 4d6:	22 2f       	mov	r18, r18
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	a9 01       	movw	r20, r18
 4dc:	40 51       	subi	r20, 0x10	; 16
 4de:	51 09       	sbc	r21, r1
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	4a 95       	dec	r20
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ee:	20 95       	com	r18
 4f0:	26 23       	and	r18, r22
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
		CLEAR_BIT(DDRB,(PinNum-PIN8));
	}
	/*check PORTA PINS from pin16 to pin23 */
	else if ((PinNum >=PIN16) && (PinNum <=PIN23))
	{
		if(PinDirection)
 4f6:	3a c0       	rjmp	.+116    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		else
		/*SET PIN in PORTC as input*/
		CLEAR_BIT(DDRC,(PinNum-PIN16));
	}	
	/*check PORTA PINS from pin24 to pin31 */
	else if ((PinNum >=PIN24) && (PinNum <=PIN31))
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	88 31       	cpi	r24, 0x18	; 24
 4fc:	b8 f1       	brcs	.+110    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	80 32       	cpi	r24, 0x20	; 32
 502:	a0 f5       	brcc	.+104    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
	{
		if(PinDirection)
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	88 23       	and	r24, r24
 508:	c1 f0       	breq	.+48     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
 50a:	81 e3       	ldi	r24, 0x31	; 49
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	21 e3       	ldi	r18, 0x31	; 49
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	20 81       	ld	r18, Z
 516:	62 2f       	mov	r22, r18
 518:	29 81       	ldd	r18, Y+1	; 0x01
 51a:	22 2f       	mov	r18, r18
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	48 51       	subi	r20, 0x18	; 24
 522:	51 09       	sbc	r21, r1
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52a:	22 0f       	add	r18, r18
 52c:	33 1f       	adc	r19, r19
 52e:	4a 95       	dec	r20
 530:	e2 f7       	brpl	.-8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 532:	26 2b       	or	r18, r22
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 538:	19 c0       	rjmp	.+50     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		if(PinDirection)
		/*SET PIN in PORTD as output*/
		SET_BIT(DDRD,(PinNum-PIN24));
		else
		/*SET PIN in PORTD as input*/
		CLEAR_BIT(DDRD,(PinNum-PIN24));
 53a:	81 e3       	ldi	r24, 0x31	; 49
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	21 e3       	ldi	r18, 0x31	; 49
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	f9 01       	movw	r30, r18
 544:	20 81       	ld	r18, Z
 546:	62 2f       	mov	r22, r18
 548:	29 81       	ldd	r18, Y+1	; 0x01
 54a:	22 2f       	mov	r18, r18
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	a9 01       	movw	r20, r18
 550:	48 51       	subi	r20, 0x18	; 24
 552:	51 09       	sbc	r21, r1
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	4a 95       	dec	r20
 560:	e2 f7       	brpl	.-8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 562:	20 95       	com	r18
 564:	26 23       	and	r18, r22
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	}
	else
	{
		
	}	
 56a:	00 c0       	rjmp	.+0      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56c:	00 00       	nop
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <main>:
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	ac 97       	sbiw	r28, 0x2c	; 44
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <Init_Tasks>
 590:	64 e0       	ldi	r22, 0x04	; 4
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 af 03 	call	0x75e	; 0x75e <schedulerInit>
 59c:	2b e0       	ldi	r18, 0x0B	; 11
 59e:	e0 e6       	ldi	r30, 0x60	; 96
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	dc 01       	movw	r26, r24
 5a8:	01 90       	ld	r0, Z+
 5aa:	0d 92       	st	X+, r0
 5ac:	2a 95       	dec	r18
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x30>
 5b0:	8b e0       	ldi	r24, 0x0B	; 11
 5b2:	eb e6       	ldi	r30, 0x6B	; 107
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	de 01       	movw	r26, r28
 5b8:	1c 96       	adiw	r26, 0x0c	; 12
 5ba:	01 90       	ld	r0, Z+
 5bc:	0d 92       	st	X+, r0
 5be:	8a 95       	dec	r24
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0x42>
 5c2:	8b e0       	ldi	r24, 0x0B	; 11
 5c4:	e6 e7       	ldi	r30, 0x76	; 118
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	de 01       	movw	r26, r28
 5ca:	57 96       	adiw	r26, 0x17	; 23
 5cc:	01 90       	ld	r0, Z+
 5ce:	0d 92       	st	X+, r0
 5d0:	8a 95       	dec	r24
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x54>
 5d4:	8b e0       	ldi	r24, 0x0B	; 11
 5d6:	e1 e8       	ldi	r30, 0x81	; 129
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	de 01       	movw	r26, r28
 5dc:	92 96       	adiw	r26, 0x22	; 34
 5de:	01 90       	ld	r0, Z+
 5e0:	0d 92       	st	X+, r0
 5e2:	8a 95       	dec	r24
 5e4:	e1 f7       	brne	.-8      	; 0x5de <main+0x66>
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
 5ee:	ce 01       	movw	r24, r28
 5f0:	0c 96       	adiw	r24, 0x0c	; 12
 5f2:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
 5f6:	ce 01       	movw	r24, r28
 5f8:	47 96       	adiw	r24, 0x17	; 23
 5fa:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
 5fe:	ce 01       	movw	r24, r28
 600:	82 96       	adiw	r24, 0x22	; 34
 602:	0e 94 10 03 	call	0x620	; 0x620 <scheduler_Add_Task>
 606:	0e 94 2c 04 	call	0x858	; 0x858 <schedulerStart>
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	ac 96       	adiw	r28, 0x2c	; 44
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	de bf       	out	0x3e, r29	; 62
 616:	0f be       	out	0x3f, r0	; 63
 618:	cd bf       	out	0x3d, r28	; 61
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <scheduler_Add_Task>:
*Return: Nothing
*Description: This Function extend the array with the new task
**************************************************************/

uint8 scheduler_Add_Task(Tasks *S_ptr)
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	00 d0       	rcall	.+0      	; 0x626 <scheduler_Add_Task+0x6>
 626:	1f 92       	push	r1
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	9b 83       	std	Y+3, r25	; 0x03
 62e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ret = TRUE;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	89 83       	std	Y+1, r24	; 0x01
	if (global_index < MAX_TASK_NUMBER)
 634:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 638:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 63c:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 640:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 644:	05 97       	sbiw	r24, 0x05	; 5
 646:	a1 05       	cpc	r26, r1
 648:	b1 05       	cpc	r27, r1
 64a:	08 f0       	brcs	.+2      	; 0x64e <scheduler_Add_Task+0x2e>
 64c:	80 c0       	rjmp	.+256    	; 0x74e <scheduler_Add_Task+0x12e>
	{
		Tasks_Arr[global_index].ptr_func = S_ptr->ptr_func;
 64e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 652:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 656:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 65a:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 65e:	2a 81       	ldd	r18, Y+2	; 0x02
 660:	3b 81       	ldd	r19, Y+3	; 0x03
 662:	f9 01       	movw	r30, r18
 664:	20 81       	ld	r18, Z
 666:	31 81       	ldd	r19, Z+1	; 0x01
 668:	ac 01       	movw	r20, r24
 66a:	6b e0       	ldi	r22, 0x0B	; 11
 66c:	64 9f       	mul	r22, r20
 66e:	c0 01       	movw	r24, r0
 670:	65 9f       	mul	r22, r21
 672:	90 0d       	add	r25, r0
 674:	11 24       	eor	r1, r1
 676:	8f 56       	subi	r24, 0x6F	; 111
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	fc 01       	movw	r30, r24
 67c:	31 83       	std	Z+1, r19	; 0x01
 67e:	20 83       	st	Z, r18
		Tasks_Arr[global_index].Task_Periodicity = S_ptr->Task_Periodicity;
 680:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <global_index>
 684:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <global_index+0x1>
 688:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <global_index+0x2>
 68c:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <global_index+0x3>
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	9b 81       	ldd	r25, Y+3	; 0x03
 694:	fc 01       	movw	r30, r24
 696:	82 81       	ldd	r24, Z+2	; 0x02
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	a4 81       	ldd	r26, Z+4	; 0x04
 69c:	b5 81       	ldd	r27, Z+5	; 0x05
 69e:	a9 01       	movw	r20, r18
 6a0:	6b e0       	ldi	r22, 0x0B	; 11
 6a2:	64 9f       	mul	r22, r20
 6a4:	90 01       	movw	r18, r0
 6a6:	65 9f       	mul	r22, r21
 6a8:	30 0d       	add	r19, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2d 56       	subi	r18, 0x6D	; 109
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	f9 01       	movw	r30, r18
 6b2:	80 83       	st	Z, r24
 6b4:	91 83       	std	Z+1, r25	; 0x01
 6b6:	a2 83       	std	Z+2, r26	; 0x02
 6b8:	b3 83       	std	Z+3, r27	; 0x03
		Tasks_Arr[global_index].Remaining_Ticks = S_ptr->Remaining_Ticks;
 6ba:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <global_index>
 6be:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <global_index+0x1>
 6c2:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <global_index+0x2>
 6c6:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <global_index+0x3>
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	9b 81       	ldd	r25, Y+3	; 0x03
 6ce:	fc 01       	movw	r30, r24
 6d0:	86 81       	ldd	r24, Z+6	; 0x06
 6d2:	97 81       	ldd	r25, Z+7	; 0x07
 6d4:	a0 85       	ldd	r26, Z+8	; 0x08
 6d6:	b1 85       	ldd	r27, Z+9	; 0x09
 6d8:	a9 01       	movw	r20, r18
 6da:	6b e0       	ldi	r22, 0x0B	; 11
 6dc:	64 9f       	mul	r22, r20
 6de:	90 01       	movw	r18, r0
 6e0:	65 9f       	mul	r22, r21
 6e2:	30 0d       	add	r19, r0
 6e4:	11 24       	eor	r1, r1
 6e6:	29 56       	subi	r18, 0x69	; 105
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	f9 01       	movw	r30, r18
 6ec:	80 83       	st	Z, r24
 6ee:	91 83       	std	Z+1, r25	; 0x01
 6f0:	a2 83       	std	Z+2, r26	; 0x02
 6f2:	b3 83       	std	Z+3, r27	; 0x03
		Tasks_Arr[global_index].Piriority = S_ptr->Piriority;
 6f4:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 6f8:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 6fc:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 700:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 704:	2a 81       	ldd	r18, Y+2	; 0x02
 706:	3b 81       	ldd	r19, Y+3	; 0x03
 708:	f9 01       	movw	r30, r18
 70a:	42 85       	ldd	r20, Z+10	; 0x0a
 70c:	9c 01       	movw	r18, r24
 70e:	5b e0       	ldi	r21, 0x0B	; 11
 710:	52 9f       	mul	r21, r18
 712:	c0 01       	movw	r24, r0
 714:	53 9f       	mul	r21, r19
 716:	90 0d       	add	r25, r0
 718:	11 24       	eor	r1, r1
 71a:	85 56       	subi	r24, 0x65	; 101
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	fc 01       	movw	r30, r24
 720:	40 83       	st	Z, r20
		
		global_index++;
 722:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 726:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 72a:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 72e:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	a1 1d       	adc	r26, r1
 736:	b1 1d       	adc	r27, r1
 738:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <global_index>
 73c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <global_index+0x1>
 740:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <global_index+0x2>
 744:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <global_index+0x3>
		
		/*Sort the array*/
		ret = TRUE;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	01 c0       	rjmp	.+2      	; 0x750 <scheduler_Add_Task+0x130>
	}
	else
	{
		ret = FALSE;
 74e:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
 750:	89 81       	ldd	r24, Y+1	; 0x01
}
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	0f 90       	pop	r0
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <schedulerInit>:
*Description: This Function set the periodicity of each task
			  and calculate the remaining ticks
**************************************************************/

void schedulerInit(uint32 Task_Num)
{
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	28 97       	sbiw	r28, 0x08	; 8
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	6d 83       	std	Y+5, r22	; 0x05
 774:	7e 83       	std	Y+6, r23	; 0x06
 776:	8f 83       	std	Y+7, r24	; 0x07
 778:	98 87       	std	Y+8, r25	; 0x08
	task_num = Task_Num;
 77a:	8d 81       	ldd	r24, Y+5	; 0x05
 77c:	9e 81       	ldd	r25, Y+6	; 0x06
 77e:	af 81       	ldd	r26, Y+7	; 0x07
 780:	b8 85       	ldd	r27, Y+8	; 0x08
 782:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <task_num>
 786:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <task_num+0x1>
 78a:	a0 93 ca 00 	sts	0x00CA, r26	; 0x8000ca <task_num+0x2>
 78e:	b0 93 cb 00 	sts	0x00CB, r27	; 0x8000cb <task_num+0x3>
	uint32 index_1 = INITIAL;
 792:	19 82       	std	Y+1, r1	; 0x01
 794:	1a 82       	std	Y+2, r1	; 0x02
 796:	1b 82       	std	Y+3, r1	; 0x03
 798:	1c 82       	std	Y+4, r1	; 0x04
	for (index_1=INITIAL;index_1<Task_Num;index_1++)
 79a:	19 82       	std	Y+1, r1	; 0x01
 79c:	1a 82       	std	Y+2, r1	; 0x02
 79e:	1b 82       	std	Y+3, r1	; 0x03
 7a0:	1c 82       	std	Y+4, r1	; 0x04
 7a2:	42 c0       	rjmp	.+132    	; 0x828 <schedulerInit+0xca>
	{
		Tasks_Arr[index_1].ptr_func = NULL;
 7a4:	29 81       	ldd	r18, Y+1	; 0x01
 7a6:	3a 81       	ldd	r19, Y+2	; 0x02
 7a8:	4b e0       	ldi	r20, 0x0B	; 11
 7aa:	42 9f       	mul	r20, r18
 7ac:	c0 01       	movw	r24, r0
 7ae:	43 9f       	mul	r20, r19
 7b0:	90 0d       	add	r25, r0
 7b2:	11 24       	eor	r1, r1
 7b4:	8f 56       	subi	r24, 0x6F	; 111
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	fc 01       	movw	r30, r24
 7ba:	11 82       	std	Z+1, r1	; 0x01
 7bc:	10 82       	st	Z, r1
		Tasks_Arr[index_1].Task_Periodicity = INITIAL;
 7be:	29 81       	ldd	r18, Y+1	; 0x01
 7c0:	3a 81       	ldd	r19, Y+2	; 0x02
 7c2:	4b e0       	ldi	r20, 0x0B	; 11
 7c4:	42 9f       	mul	r20, r18
 7c6:	c0 01       	movw	r24, r0
 7c8:	43 9f       	mul	r20, r19
 7ca:	90 0d       	add	r25, r0
 7cc:	11 24       	eor	r1, r1
 7ce:	8d 56       	subi	r24, 0x6D	; 109
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	fc 01       	movw	r30, r24
 7d4:	10 82       	st	Z, r1
 7d6:	11 82       	std	Z+1, r1	; 0x01
 7d8:	12 82       	std	Z+2, r1	; 0x02
 7da:	13 82       	std	Z+3, r1	; 0x03
		Tasks_Arr[index_1].Remaining_Ticks = INITIAL;
 7dc:	29 81       	ldd	r18, Y+1	; 0x01
 7de:	3a 81       	ldd	r19, Y+2	; 0x02
 7e0:	4b e0       	ldi	r20, 0x0B	; 11
 7e2:	42 9f       	mul	r20, r18
 7e4:	c0 01       	movw	r24, r0
 7e6:	43 9f       	mul	r20, r19
 7e8:	90 0d       	add	r25, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	89 56       	subi	r24, 0x69	; 105
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	fc 01       	movw	r30, r24
 7f2:	10 82       	st	Z, r1
 7f4:	11 82       	std	Z+1, r1	; 0x01
 7f6:	12 82       	std	Z+2, r1	; 0x02
 7f8:	13 82       	std	Z+3, r1	; 0x03
		Tasks_Arr[index_1].Piriority = INITIAL;
 7fa:	29 81       	ldd	r18, Y+1	; 0x01
 7fc:	3a 81       	ldd	r19, Y+2	; 0x02
 7fe:	4b e0       	ldi	r20, 0x0B	; 11
 800:	42 9f       	mul	r20, r18
 802:	c0 01       	movw	r24, r0
 804:	43 9f       	mul	r20, r19
 806:	90 0d       	add	r25, r0
 808:	11 24       	eor	r1, r1
 80a:	85 56       	subi	r24, 0x65	; 101
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	fc 01       	movw	r30, r24
 810:	10 82       	st	Z, r1

void schedulerInit(uint32 Task_Num)
{
	task_num = Task_Num;
	uint32 index_1 = INITIAL;
	for (index_1=INITIAL;index_1<Task_Num;index_1++)
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	9a 81       	ldd	r25, Y+2	; 0x02
 816:	ab 81       	ldd	r26, Y+3	; 0x03
 818:	bc 81       	ldd	r27, Y+4	; 0x04
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	a1 1d       	adc	r26, r1
 81e:	b1 1d       	adc	r27, r1
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	9a 83       	std	Y+2, r25	; 0x02
 824:	ab 83       	std	Y+3, r26	; 0x03
 826:	bc 83       	std	Y+4, r27	; 0x04
 828:	29 81       	ldd	r18, Y+1	; 0x01
 82a:	3a 81       	ldd	r19, Y+2	; 0x02
 82c:	4b 81       	ldd	r20, Y+3	; 0x03
 82e:	5c 81       	ldd	r21, Y+4	; 0x04
 830:	8d 81       	ldd	r24, Y+5	; 0x05
 832:	9e 81       	ldd	r25, Y+6	; 0x06
 834:	af 81       	ldd	r26, Y+7	; 0x07
 836:	b8 85       	ldd	r27, Y+8	; 0x08
 838:	28 17       	cp	r18, r24
 83a:	39 07       	cpc	r19, r25
 83c:	4a 07       	cpc	r20, r26
 83e:	5b 07       	cpc	r21, r27
 840:	08 f4       	brcc	.+2      	; 0x844 <schedulerInit+0xe6>
 842:	b0 cf       	rjmp	.-160    	; 0x7a4 <schedulerInit+0x46>
		Tasks_Arr[index_1].ptr_func = NULL;
		Tasks_Arr[index_1].Task_Periodicity = INITIAL;
		Tasks_Arr[index_1].Remaining_Ticks = INITIAL;
		Tasks_Arr[index_1].Piriority = INITIAL;
	}
}
 844:	00 00       	nop
 846:	28 96       	adiw	r28, 0x08	; 8
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <schedulerStart>:
*Return: Nothing
*Description: This Function Starts the OS scheduler 
**************************************************************/

void schedulerStart()
{
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	cd b7       	in	r28, 0x3d	; 61
 85e:	de b7       	in	r29, 0x3e	; 62
	/*Sort the array of task based on priorities*/
	sorting ();
 860:	0e 94 e6 04 	call	0x9cc	; 0x9cc <sorting>
	/*initialize the timer*/
	timer_init();
 864:	0e 94 4e 06 	call	0xc9c	; 0xc9c <timer_init>
	/*call the set flag function based on ISR using call back mechanism*/
	set_call_back(set_flag);
 868:	8b ed       	ldi	r24, 0xDB	; 219
 86a:	94 e0       	ldi	r25, 0x04	; 4
 86c:	0e 94 b1 06 	call	0xd62	; 0xd62 <set_call_back>
	while(TRUE)
	{
		scheduler_Remove_Task();
 870:	0e 94 b6 05 	call	0xb6c	; 0xb6c <scheduler_Remove_Task>
		if(flag==ONE)
 874:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	d1 f7       	brne	.-12     	; 0x870 <__stack+0x11>
		{
			flag=ZERO;
 87c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
			/*Call the TCC Scheduler*/
			TTC_Scheduler();
 880:	0e 94 43 04 	call	0x886	; 0x886 <TTC_Scheduler>
		}
	}
 884:	f5 cf       	rjmp	.-22     	; 0x870 <__stack+0x11>

00000886 <TTC_Scheduler>:
*Return: Nothing
*Description: This Function has the Algorithm that choose which
			  task to be executed
**************************************************************/
void TTC_Scheduler(void)
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	1f 92       	push	r1
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
	uint8 i = ZERO;
 890:	19 82       	std	Y+1, r1	; 0x01
	
	for (i = ZERO; i<global_index;i++)
 892:	19 82       	std	Y+1, r1	; 0x01
 894:	78 c0       	rjmp	.+240    	; 0x986 <TTC_Scheduler+0x100>
	{
		Tasks_Arr[i].Remaining_Ticks--;
 896:	89 81       	ldd	r24, Y+1	; 0x01
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	4b e0       	ldi	r20, 0x0B	; 11
 89e:	42 9f       	mul	r20, r18
 8a0:	c0 01       	movw	r24, r0
 8a2:	43 9f       	mul	r20, r19
 8a4:	90 0d       	add	r25, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	89 56       	subi	r24, 0x69	; 105
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	fc 01       	movw	r30, r24
 8ae:	80 81       	ld	r24, Z
 8b0:	91 81       	ldd	r25, Z+1	; 0x01
 8b2:	a2 81       	ldd	r26, Z+2	; 0x02
 8b4:	b3 81       	ldd	r27, Z+3	; 0x03
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	a1 09       	sbc	r26, r1
 8ba:	b1 09       	sbc	r27, r1
 8bc:	6b e0       	ldi	r22, 0x0B	; 11
 8be:	62 9f       	mul	r22, r18
 8c0:	a0 01       	movw	r20, r0
 8c2:	63 9f       	mul	r22, r19
 8c4:	50 0d       	add	r21, r0
 8c6:	11 24       	eor	r1, r1
 8c8:	9a 01       	movw	r18, r20
 8ca:	29 56       	subi	r18, 0x69	; 105
 8cc:	3f 4f       	sbci	r19, 0xFF	; 255
 8ce:	f9 01       	movw	r30, r18
 8d0:	80 83       	st	Z, r24
 8d2:	91 83       	std	Z+1, r25	; 0x01
 8d4:	a2 83       	std	Z+2, r26	; 0x02
 8d6:	b3 83       	std	Z+3, r27	; 0x03
		if((Tasks_Arr[i].Remaining_Ticks==ZERO) && (Tasks_Arr[i].Piriority<NOT_AVAILABLE_PRIORITY))
 8d8:	89 81       	ldd	r24, Y+1	; 0x01
 8da:	28 2f       	mov	r18, r24
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	4b e0       	ldi	r20, 0x0B	; 11
 8e0:	42 9f       	mul	r20, r18
 8e2:	c0 01       	movw	r24, r0
 8e4:	43 9f       	mul	r20, r19
 8e6:	90 0d       	add	r25, r0
 8e8:	11 24       	eor	r1, r1
 8ea:	89 56       	subi	r24, 0x69	; 105
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	fc 01       	movw	r30, r24
 8f0:	80 81       	ld	r24, Z
 8f2:	91 81       	ldd	r25, Z+1	; 0x01
 8f4:	a2 81       	ldd	r26, Z+2	; 0x02
 8f6:	b3 81       	ldd	r27, Z+3	; 0x03
 8f8:	89 2b       	or	r24, r25
 8fa:	8a 2b       	or	r24, r26
 8fc:	8b 2b       	or	r24, r27
 8fe:	09 f0       	breq	.+2      	; 0x902 <TTC_Scheduler+0x7c>
 900:	3f c0       	rjmp	.+126    	; 0x980 <TTC_Scheduler+0xfa>
 902:	89 81       	ldd	r24, Y+1	; 0x01
 904:	28 2f       	mov	r18, r24
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	4b e0       	ldi	r20, 0x0B	; 11
 90a:	42 9f       	mul	r20, r18
 90c:	c0 01       	movw	r24, r0
 90e:	43 9f       	mul	r20, r19
 910:	90 0d       	add	r25, r0
 912:	11 24       	eor	r1, r1
 914:	85 56       	subi	r24, 0x65	; 101
 916:	9f 4f       	sbci	r25, 0xFF	; 255
 918:	fc 01       	movw	r30, r24
 91a:	80 81       	ld	r24, Z
 91c:	84 36       	cpi	r24, 0x64	; 100
 91e:	80 f5       	brcc	.+96     	; 0x980 <TTC_Scheduler+0xfa>
		{
			
			Tasks_Arr[i].ptr_func();
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	4b e0       	ldi	r20, 0x0B	; 11
 928:	42 9f       	mul	r20, r18
 92a:	c0 01       	movw	r24, r0
 92c:	43 9f       	mul	r20, r19
 92e:	90 0d       	add	r25, r0
 930:	11 24       	eor	r1, r1
 932:	8f 56       	subi	r24, 0x6F	; 111
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	fc 01       	movw	r30, r24
 938:	80 81       	ld	r24, Z
 93a:	91 81       	ldd	r25, Z+1	; 0x01
 93c:	fc 01       	movw	r30, r24
 93e:	09 95       	icall
			Tasks_Arr[i].Remaining_Ticks = Tasks_Arr[i].Task_Periodicity;
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	48 2f       	mov	r20, r24
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	6b e0       	ldi	r22, 0x0B	; 11
 94e:	62 9f       	mul	r22, r18
 950:	c0 01       	movw	r24, r0
 952:	63 9f       	mul	r22, r19
 954:	90 0d       	add	r25, r0
 956:	11 24       	eor	r1, r1
 958:	8d 56       	subi	r24, 0x6D	; 109
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	fc 01       	movw	r30, r24
 95e:	80 81       	ld	r24, Z
 960:	91 81       	ldd	r25, Z+1	; 0x01
 962:	a2 81       	ldd	r26, Z+2	; 0x02
 964:	b3 81       	ldd	r27, Z+3	; 0x03
 966:	6b e0       	ldi	r22, 0x0B	; 11
 968:	64 9f       	mul	r22, r20
 96a:	90 01       	movw	r18, r0
 96c:	65 9f       	mul	r22, r21
 96e:	30 0d       	add	r19, r0
 970:	11 24       	eor	r1, r1
 972:	29 56       	subi	r18, 0x69	; 105
 974:	3f 4f       	sbci	r19, 0xFF	; 255
 976:	f9 01       	movw	r30, r18
 978:	80 83       	st	Z, r24
 97a:	91 83       	std	Z+1, r25	; 0x01
 97c:	a2 83       	std	Z+2, r26	; 0x02
 97e:	b3 83       	std	Z+3, r27	; 0x03
**************************************************************/
void TTC_Scheduler(void)
{
	uint8 i = ZERO;
	
	for (i = ZERO; i<global_index;i++)
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	8f 5f       	subi	r24, 0xFF	; 255
 984:	89 83       	std	Y+1, r24	; 0x01
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	40 e0       	ldi	r20, 0x00	; 0
 98e:	50 e0       	ldi	r21, 0x00	; 0
 990:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 994:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 998:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 99c:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 9a0:	28 17       	cp	r18, r24
 9a2:	39 07       	cpc	r19, r25
 9a4:	4a 07       	cpc	r20, r26
 9a6:	5b 07       	cpc	r21, r27
 9a8:	08 f4       	brcc	.+2      	; 0x9ac <TTC_Scheduler+0x126>
 9aa:	75 cf       	rjmp	.-278    	; 0x896 <TTC_Scheduler+0x10>
		else
		{
			/*Nothing to do*/
		}
	}
}
 9ac:	00 00       	nop
 9ae:	0f 90       	pop	r0
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <set_flag>:
*Return: Nothing
*Description: This Function Set flag to High When After 
			  ISR execution
**************************************************************/
void set_flag(void)
{
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
	flag = ONE;
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
}
 9c4:	00 00       	nop
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	08 95       	ret

000009cc <sorting>:
*			I/O: NOTHING
*Return: Nothing
*Description: This Function sort an array of structs
**************************************************************/
static void sorting ()
{
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	63 97       	sbiw	r28, 0x13	; 19
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	f8 94       	cli
 9da:	de bf       	out	0x3e, r29	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	cd bf       	out	0x3d, r28	; 61
	uint32 counter1 = INITIAL, counter2 = INITIAL;
 9e0:	19 82       	std	Y+1, r1	; 0x01
 9e2:	1a 82       	std	Y+2, r1	; 0x02
 9e4:	1b 82       	std	Y+3, r1	; 0x03
 9e6:	1c 82       	std	Y+4, r1	; 0x04
 9e8:	1d 82       	std	Y+5, r1	; 0x05
 9ea:	1e 82       	std	Y+6, r1	; 0x06
 9ec:	1f 82       	std	Y+7, r1	; 0x07
 9ee:	18 86       	std	Y+8, r1	; 0x08
	Tasks temp;
	for(counter1 = INITIAL; counter1 < global_index; counter1++)
 9f0:	19 82       	std	Y+1, r1	; 0x01
 9f2:	1a 82       	std	Y+2, r1	; 0x02
 9f4:	1b 82       	std	Y+3, r1	; 0x03
 9f6:	1c 82       	std	Y+4, r1	; 0x04
 9f8:	9d c0       	rjmp	.+314    	; 0xb34 <sorting+0x168>
	{
		for (counter2 = ONE; counter2 < global_index; counter2++)
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	a0 e0       	ldi	r26, 0x00	; 0
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	8d 83       	std	Y+5, r24	; 0x05
 a04:	9e 83       	std	Y+6, r25	; 0x06
 a06:	af 83       	std	Y+7, r26	; 0x07
 a08:	b8 87       	std	Y+8, r27	; 0x08
 a0a:	77 c0       	rjmp	.+238    	; 0xafa <sorting+0x12e>
		{
			if (Tasks_Arr[counter2].Piriority < Tasks_Arr[counter2-ONE].Piriority)
 a0c:	2d 81       	ldd	r18, Y+5	; 0x05
 a0e:	3e 81       	ldd	r19, Y+6	; 0x06
 a10:	4b e0       	ldi	r20, 0x0B	; 11
 a12:	42 9f       	mul	r20, r18
 a14:	c0 01       	movw	r24, r0
 a16:	43 9f       	mul	r20, r19
 a18:	90 0d       	add	r25, r0
 a1a:	11 24       	eor	r1, r1
 a1c:	85 56       	subi	r24, 0x65	; 101
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	fc 01       	movw	r30, r24
 a22:	40 81       	ld	r20, Z
 a24:	8d 81       	ldd	r24, Y+5	; 0x05
 a26:	9e 81       	ldd	r25, Y+6	; 0x06
 a28:	af 81       	ldd	r26, Y+7	; 0x07
 a2a:	b8 85       	ldd	r27, Y+8	; 0x08
 a2c:	01 97       	sbiw	r24, 0x01	; 1
 a2e:	a1 09       	sbc	r26, r1
 a30:	b1 09       	sbc	r27, r1
 a32:	9c 01       	movw	r18, r24
 a34:	5b e0       	ldi	r21, 0x0B	; 11
 a36:	52 9f       	mul	r21, r18
 a38:	c0 01       	movw	r24, r0
 a3a:	53 9f       	mul	r21, r19
 a3c:	90 0d       	add	r25, r0
 a3e:	11 24       	eor	r1, r1
 a40:	85 56       	subi	r24, 0x65	; 101
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	fc 01       	movw	r30, r24
 a46:	80 81       	ld	r24, Z
 a48:	48 17       	cp	r20, r24
 a4a:	08 f0       	brcs	.+2      	; 0xa4e <sorting+0x82>
 a4c:	4b c0       	rjmp	.+150    	; 0xae4 <sorting+0x118>
			{
				temp = Tasks_Arr[counter2];
 a4e:	2d 81       	ldd	r18, Y+5	; 0x05
 a50:	3e 81       	ldd	r19, Y+6	; 0x06
 a52:	4b e0       	ldi	r20, 0x0B	; 11
 a54:	42 9f       	mul	r20, r18
 a56:	c0 01       	movw	r24, r0
 a58:	43 9f       	mul	r20, r19
 a5a:	90 0d       	add	r25, r0
 a5c:	11 24       	eor	r1, r1
 a5e:	8f 56       	subi	r24, 0x6F	; 111
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	2b e0       	ldi	r18, 0x0B	; 11
 a64:	fc 01       	movw	r30, r24
 a66:	de 01       	movw	r26, r28
 a68:	19 96       	adiw	r26, 0x09	; 9
 a6a:	01 90       	ld	r0, Z+
 a6c:	0d 92       	st	X+, r0
 a6e:	2a 95       	dec	r18
 a70:	e1 f7       	brne	.-8      	; 0xa6a <sorting+0x9e>
				Tasks_Arr[counter2] = Tasks_Arr[counter2-ONE];
 a72:	8d 81       	ldd	r24, Y+5	; 0x05
 a74:	9e 81       	ldd	r25, Y+6	; 0x06
 a76:	af 81       	ldd	r26, Y+7	; 0x07
 a78:	b8 85       	ldd	r27, Y+8	; 0x08
 a7a:	01 97       	sbiw	r24, 0x01	; 1
 a7c:	a1 09       	sbc	r26, r1
 a7e:	b1 09       	sbc	r27, r1
 a80:	4d 81       	ldd	r20, Y+5	; 0x05
 a82:	5e 81       	ldd	r21, Y+6	; 0x06
 a84:	6b e0       	ldi	r22, 0x0B	; 11
 a86:	64 9f       	mul	r22, r20
 a88:	90 01       	movw	r18, r0
 a8a:	65 9f       	mul	r22, r21
 a8c:	30 0d       	add	r19, r0
 a8e:	11 24       	eor	r1, r1
 a90:	2f 56       	subi	r18, 0x6F	; 111
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	ac 01       	movw	r20, r24
 a96:	6b e0       	ldi	r22, 0x0B	; 11
 a98:	64 9f       	mul	r22, r20
 a9a:	c0 01       	movw	r24, r0
 a9c:	65 9f       	mul	r22, r21
 a9e:	90 0d       	add	r25, r0
 aa0:	11 24       	eor	r1, r1
 aa2:	8f 56       	subi	r24, 0x6F	; 111
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	4b e0       	ldi	r20, 0x0B	; 11
 aa8:	fc 01       	movw	r30, r24
 aaa:	d9 01       	movw	r26, r18
 aac:	01 90       	ld	r0, Z+
 aae:	0d 92       	st	X+, r0
 ab0:	4a 95       	dec	r20
 ab2:	e1 f7       	brne	.-8      	; 0xaac <sorting+0xe0>
				Tasks_Arr[counter2-ONE] = temp;
 ab4:	8d 81       	ldd	r24, Y+5	; 0x05
 ab6:	9e 81       	ldd	r25, Y+6	; 0x06
 ab8:	af 81       	ldd	r26, Y+7	; 0x07
 aba:	b8 85       	ldd	r27, Y+8	; 0x08
 abc:	01 97       	sbiw	r24, 0x01	; 1
 abe:	a1 09       	sbc	r26, r1
 ac0:	b1 09       	sbc	r27, r1
 ac2:	9c 01       	movw	r18, r24
 ac4:	4b e0       	ldi	r20, 0x0B	; 11
 ac6:	42 9f       	mul	r20, r18
 ac8:	c0 01       	movw	r24, r0
 aca:	43 9f       	mul	r20, r19
 acc:	90 0d       	add	r25, r0
 ace:	11 24       	eor	r1, r1
 ad0:	8f 56       	subi	r24, 0x6F	; 111
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	2b e0       	ldi	r18, 0x0B	; 11
 ad6:	fe 01       	movw	r30, r28
 ad8:	39 96       	adiw	r30, 0x09	; 9
 ada:	dc 01       	movw	r26, r24
 adc:	01 90       	ld	r0, Z+
 ade:	0d 92       	st	X+, r0
 ae0:	2a 95       	dec	r18
 ae2:	e1 f7       	brne	.-8      	; 0xadc <sorting+0x110>
{
	uint32 counter1 = INITIAL, counter2 = INITIAL;
	Tasks temp;
	for(counter1 = INITIAL; counter1 < global_index; counter1++)
	{
		for (counter2 = ONE; counter2 < global_index; counter2++)
 ae4:	8d 81       	ldd	r24, Y+5	; 0x05
 ae6:	9e 81       	ldd	r25, Y+6	; 0x06
 ae8:	af 81       	ldd	r26, Y+7	; 0x07
 aea:	b8 85       	ldd	r27, Y+8	; 0x08
 aec:	01 96       	adiw	r24, 0x01	; 1
 aee:	a1 1d       	adc	r26, r1
 af0:	b1 1d       	adc	r27, r1
 af2:	8d 83       	std	Y+5, r24	; 0x05
 af4:	9e 83       	std	Y+6, r25	; 0x06
 af6:	af 83       	std	Y+7, r26	; 0x07
 af8:	b8 87       	std	Y+8, r27	; 0x08
 afa:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 afe:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 b02:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 b06:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 b0a:	2d 81       	ldd	r18, Y+5	; 0x05
 b0c:	3e 81       	ldd	r19, Y+6	; 0x06
 b0e:	4f 81       	ldd	r20, Y+7	; 0x07
 b10:	58 85       	ldd	r21, Y+8	; 0x08
 b12:	28 17       	cp	r18, r24
 b14:	39 07       	cpc	r19, r25
 b16:	4a 07       	cpc	r20, r26
 b18:	5b 07       	cpc	r21, r27
 b1a:	08 f4       	brcc	.+2      	; 0xb1e <sorting+0x152>
 b1c:	77 cf       	rjmp	.-274    	; 0xa0c <sorting+0x40>
**************************************************************/
static void sorting ()
{
	uint32 counter1 = INITIAL, counter2 = INITIAL;
	Tasks temp;
	for(counter1 = INITIAL; counter1 < global_index; counter1++)
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
 b20:	9a 81       	ldd	r25, Y+2	; 0x02
 b22:	ab 81       	ldd	r26, Y+3	; 0x03
 b24:	bc 81       	ldd	r27, Y+4	; 0x04
 b26:	01 96       	adiw	r24, 0x01	; 1
 b28:	a1 1d       	adc	r26, r1
 b2a:	b1 1d       	adc	r27, r1
 b2c:	89 83       	std	Y+1, r24	; 0x01
 b2e:	9a 83       	std	Y+2, r25	; 0x02
 b30:	ab 83       	std	Y+3, r26	; 0x03
 b32:	bc 83       	std	Y+4, r27	; 0x04
 b34:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 b38:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 b3c:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 b40:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 b44:	29 81       	ldd	r18, Y+1	; 0x01
 b46:	3a 81       	ldd	r19, Y+2	; 0x02
 b48:	4b 81       	ldd	r20, Y+3	; 0x03
 b4a:	5c 81       	ldd	r21, Y+4	; 0x04
 b4c:	28 17       	cp	r18, r24
 b4e:	39 07       	cpc	r19, r25
 b50:	4a 07       	cpc	r20, r26
 b52:	5b 07       	cpc	r21, r27
 b54:	08 f4       	brcc	.+2      	; 0xb58 <sorting+0x18c>
 b56:	51 cf       	rjmp	.-350    	; 0x9fa <sorting+0x2e>
				/*Nothing to do*/
			}
		}
	}
	
}
 b58:	00 00       	nop
 b5a:	63 96       	adiw	r28, 0x13	; 19
 b5c:	0f b6       	in	r0, 0x3f	; 63
 b5e:	f8 94       	cli
 b60:	de bf       	out	0x3e, r29	; 62
 b62:	0f be       	out	0x3f, r0	; 63
 b64:	cd bf       	out	0x3d, r28	; 61
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

00000b6c <scheduler_Remove_Task>:
*Return: Nothing
*Description: This Function remove task at run time
**************************************************************/

static void scheduler_Remove_Task ()
{
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
	if (DIO_ReadPin(BUTTON0))
 b74:	8a e0       	ldi	r24, 0x0A	; 10
 b76:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 b7a:	88 23       	and	r24, r24
 b7c:	b9 f0       	breq	.+46     	; 0xbac <scheduler_Remove_Task+0x40>
	{
		
		 Tasks_Arr[global_index-ONE].Piriority = NOT_AVAILABLE_PRIORITY;
 b7e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <global_index>
 b82:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <global_index+0x1>
 b86:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <global_index+0x2>
 b8a:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <global_index+0x3>
 b8e:	01 97       	sbiw	r24, 0x01	; 1
 b90:	a1 09       	sbc	r26, r1
 b92:	b1 09       	sbc	r27, r1
 b94:	9c 01       	movw	r18, r24
 b96:	4b e0       	ldi	r20, 0x0B	; 11
 b98:	42 9f       	mul	r20, r18
 b9a:	c0 01       	movw	r24, r0
 b9c:	43 9f       	mul	r20, r19
 b9e:	90 0d       	add	r25, r0
 ba0:	11 24       	eor	r1, r1
 ba2:	85 56       	subi	r24, 0x65	; 101
 ba4:	9f 4f       	sbci	r25, 0xFF	; 255
 ba6:	24 e6       	ldi	r18, 0x64	; 100
 ba8:	fc 01       	movw	r30, r24
 baa:	20 83       	st	Z, r18
	}
	
 bac:	00 00       	nop
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	08 95       	ret

00000bb4 <Init_Tasks>:
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	cd b7       	in	r28, 0x3d	; 61
 bba:	de b7       	in	r29, 0x3e	; 62
 bbc:	61 e0       	ldi	r22, 0x01	; 1
 bbe:	8c e0       	ldi	r24, 0x0C	; 12
 bc0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
 bc4:	61 e0       	ldi	r22, 0x01	; 1
 bc6:	8d e0       	ldi	r24, 0x0D	; 13
 bc8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
 bcc:	61 e0       	ldi	r22, 0x01	; 1
 bce:	8e e0       	ldi	r24, 0x0E	; 14
 bd0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
 bd4:	61 e0       	ldi	r22, 0x01	; 1
 bd6:	8f e0       	ldi	r24, 0x0F	; 15
 bd8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
 bdc:	60 e0       	ldi	r22, 0x00	; 0
 bde:	8a e0       	ldi	r24, 0x0A	; 10
 be0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDirection>
 be4:	00 00       	nop
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	08 95       	ret

00000bec <Led0_Task>:
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
 bf4:	8c e0       	ldi	r24, 0x0C	; 12
 bf6:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 bfa:	88 23       	and	r24, r24
 bfc:	29 f0       	breq	.+10     	; 0xc08 <Led0_Task+0x1c>
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	8c e0       	ldi	r24, 0x0C	; 12
 c02:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c06:	04 c0       	rjmp	.+8      	; 0xc10 <Led0_Task+0x24>
 c08:	61 e0       	ldi	r22, 0x01	; 1
 c0a:	8c e0       	ldi	r24, 0x0C	; 12
 c0c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c10:	00 00       	nop
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	08 95       	ret

00000c18 <Led1_Task>:
 c18:	cf 93       	push	r28
 c1a:	df 93       	push	r29
 c1c:	cd b7       	in	r28, 0x3d	; 61
 c1e:	de b7       	in	r29, 0x3e	; 62
 c20:	8d e0       	ldi	r24, 0x0D	; 13
 c22:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 c26:	88 23       	and	r24, r24
 c28:	29 f0       	breq	.+10     	; 0xc34 <Led1_Task+0x1c>
 c2a:	60 e0       	ldi	r22, 0x00	; 0
 c2c:	8d e0       	ldi	r24, 0x0D	; 13
 c2e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c32:	04 c0       	rjmp	.+8      	; 0xc3c <Led1_Task+0x24>
 c34:	61 e0       	ldi	r22, 0x01	; 1
 c36:	8d e0       	ldi	r24, 0x0D	; 13
 c38:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c3c:	00 00       	nop
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	08 95       	ret

00000c44 <Led2_Task>:
 c44:	cf 93       	push	r28
 c46:	df 93       	push	r29
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62
 c4c:	8e e0       	ldi	r24, 0x0E	; 14
 c4e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 c52:	88 23       	and	r24, r24
 c54:	29 f0       	breq	.+10     	; 0xc60 <Led2_Task+0x1c>
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	8e e0       	ldi	r24, 0x0E	; 14
 c5a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c5e:	04 c0       	rjmp	.+8      	; 0xc68 <Led2_Task+0x24>
 c60:	61 e0       	ldi	r22, 0x01	; 1
 c62:	8e e0       	ldi	r24, 0x0E	; 14
 c64:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c68:	00 00       	nop
 c6a:	df 91       	pop	r29
 c6c:	cf 91       	pop	r28
 c6e:	08 95       	ret

00000c70 <Led3_Task>:
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	cd b7       	in	r28, 0x3d	; 61
 c76:	de b7       	in	r29, 0x3e	; 62
 c78:	8f e0       	ldi	r24, 0x0F	; 15
 c7a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_ReadPin>
 c7e:	88 23       	and	r24, r24
 c80:	29 f0       	breq	.+10     	; 0xc8c <Led3_Task+0x1c>
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	8f e0       	ldi	r24, 0x0F	; 15
 c86:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c8a:	04 c0       	rjmp	.+8      	; 0xc94 <Led3_Task+0x24>
 c8c:	61 e0       	ldi	r22, 0x01	; 1
 c8e:	8f e0       	ldi	r24, 0x0F	; 15
 c90:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 c94:	00 00       	nop
 c96:	df 91       	pop	r29
 c98:	cf 91       	pop	r28
 c9a:	08 95       	ret

00000c9c <timer_init>:
 c9c:	cf 93       	push	r28
 c9e:	df 93       	push	r29
 ca0:	cd b7       	in	r28, 0x3d	; 61
 ca2:	de b7       	in	r29, 0x3e	; 62
 ca4:	8f e4       	ldi	r24, 0x4F	; 79
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	2f e4       	ldi	r18, 0x4F	; 79
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	f9 01       	movw	r30, r18
 cae:	20 81       	ld	r18, Z
 cb0:	2e 7f       	andi	r18, 0xFE	; 254
 cb2:	fc 01       	movw	r30, r24
 cb4:	20 83       	st	Z, r18
 cb6:	8f e4       	ldi	r24, 0x4F	; 79
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	2f e4       	ldi	r18, 0x4F	; 79
 cbc:	30 e0       	ldi	r19, 0x00	; 0
 cbe:	f9 01       	movw	r30, r18
 cc0:	20 81       	ld	r18, Z
 cc2:	2d 7f       	andi	r18, 0xFD	; 253
 cc4:	fc 01       	movw	r30, r24
 cc6:	20 83       	st	Z, r18
 cc8:	8e e4       	ldi	r24, 0x4E	; 78
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	2e e4       	ldi	r18, 0x4E	; 78
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	f9 01       	movw	r30, r18
 cd2:	20 81       	ld	r18, Z
 cd4:	28 60       	ori	r18, 0x08	; 8
 cd6:	fc 01       	movw	r30, r24
 cd8:	20 83       	st	Z, r18
 cda:	8e e4       	ldi	r24, 0x4E	; 78
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	2e e4       	ldi	r18, 0x4E	; 78
 ce0:	30 e0       	ldi	r19, 0x00	; 0
 ce2:	f9 01       	movw	r30, r18
 ce4:	20 81       	ld	r18, Z
 ce6:	2f 7e       	andi	r18, 0xEF	; 239
 ce8:	fc 01       	movw	r30, r24
 cea:	20 83       	st	Z, r18
 cec:	8b e4       	ldi	r24, 0x4B	; 75
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	2e e3       	ldi	r18, 0x3E	; 62
 cf2:	fc 01       	movw	r30, r24
 cf4:	20 83       	st	Z, r18
 cf6:	8a e4       	ldi	r24, 0x4A	; 74
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	20 e8       	ldi	r18, 0x80	; 128
 cfc:	fc 01       	movw	r30, r24
 cfe:	20 83       	st	Z, r18
 d00:	8e e4       	ldi	r24, 0x4E	; 78
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	2e e4       	ldi	r18, 0x4E	; 78
 d06:	30 e0       	ldi	r19, 0x00	; 0
 d08:	f9 01       	movw	r30, r18
 d0a:	20 81       	ld	r18, Z
 d0c:	21 60       	ori	r18, 0x01	; 1
 d0e:	fc 01       	movw	r30, r24
 d10:	20 83       	st	Z, r18
 d12:	8e e4       	ldi	r24, 0x4E	; 78
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	2e e4       	ldi	r18, 0x4E	; 78
 d18:	30 e0       	ldi	r19, 0x00	; 0
 d1a:	f9 01       	movw	r30, r18
 d1c:	20 81       	ld	r18, Z
 d1e:	2d 7f       	andi	r18, 0xFD	; 253
 d20:	fc 01       	movw	r30, r24
 d22:	20 83       	st	Z, r18
 d24:	8e e4       	ldi	r24, 0x4E	; 78
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	2e e4       	ldi	r18, 0x4E	; 78
 d2a:	30 e0       	ldi	r19, 0x00	; 0
 d2c:	f9 01       	movw	r30, r18
 d2e:	20 81       	ld	r18, Z
 d30:	2b 7f       	andi	r18, 0xFB	; 251
 d32:	fc 01       	movw	r30, r24
 d34:	20 83       	st	Z, r18
 d36:	8f e5       	ldi	r24, 0x5F	; 95
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	2f e5       	ldi	r18, 0x5F	; 95
 d3c:	30 e0       	ldi	r19, 0x00	; 0
 d3e:	f9 01       	movw	r30, r18
 d40:	20 81       	ld	r18, Z
 d42:	20 68       	ori	r18, 0x80	; 128
 d44:	fc 01       	movw	r30, r24
 d46:	20 83       	st	Z, r18
 d48:	89 e5       	ldi	r24, 0x59	; 89
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	29 e5       	ldi	r18, 0x59	; 89
 d4e:	30 e0       	ldi	r19, 0x00	; 0
 d50:	f9 01       	movw	r30, r18
 d52:	20 81       	ld	r18, Z
 d54:	20 61       	ori	r18, 0x10	; 16
 d56:	fc 01       	movw	r30, r24
 d58:	20 83       	st	Z, r18
 d5a:	00 00       	nop
 d5c:	df 91       	pop	r29
 d5e:	cf 91       	pop	r28
 d60:	08 95       	ret

00000d62 <set_call_back>:
 d62:	cf 93       	push	r28
 d64:	df 93       	push	r29
 d66:	00 d0       	rcall	.+0      	; 0xd68 <set_call_back+0x6>
 d68:	cd b7       	in	r28, 0x3d	; 61
 d6a:	de b7       	in	r29, 0x3e	; 62
 d6c:	9a 83       	std	Y+2, r25	; 0x02
 d6e:	89 83       	std	Y+1, r24	; 0x01
 d70:	89 81       	ldd	r24, Y+1	; 0x01
 d72:	9a 81       	ldd	r25, Y+2	; 0x02
 d74:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <call_back+0x1>
 d78:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <call_back>
 d7c:	00 00       	nop
 d7e:	0f 90       	pop	r0
 d80:	0f 90       	pop	r0
 d82:	df 91       	pop	r29
 d84:	cf 91       	pop	r28
 d86:	08 95       	ret

00000d88 <__vector_7>:
 d88:	1f 92       	push	r1
 d8a:	0f 92       	push	r0
 d8c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 d90:	0f 92       	push	r0
 d92:	11 24       	eor	r1, r1
 d94:	2f 93       	push	r18
 d96:	3f 93       	push	r19
 d98:	4f 93       	push	r20
 d9a:	5f 93       	push	r21
 d9c:	6f 93       	push	r22
 d9e:	7f 93       	push	r23
 da0:	8f 93       	push	r24
 da2:	9f 93       	push	r25
 da4:	af 93       	push	r26
 da6:	bf 93       	push	r27
 da8:	ef 93       	push	r30
 daa:	ff 93       	push	r31
 dac:	cf 93       	push	r28
 dae:	df 93       	push	r29
 db0:	cd b7       	in	r28, 0x3d	; 61
 db2:	de b7       	in	r29, 0x3e	; 62
 db4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <call_back>
 db8:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <call_back+0x1>
 dbc:	fc 01       	movw	r30, r24
 dbe:	09 95       	icall
 dc0:	00 00       	nop
 dc2:	df 91       	pop	r29
 dc4:	cf 91       	pop	r28
 dc6:	ff 91       	pop	r31
 dc8:	ef 91       	pop	r30
 dca:	bf 91       	pop	r27
 dcc:	af 91       	pop	r26
 dce:	9f 91       	pop	r25
 dd0:	8f 91       	pop	r24
 dd2:	7f 91       	pop	r23
 dd4:	6f 91       	pop	r22
 dd6:	5f 91       	pop	r21
 dd8:	4f 91       	pop	r20
 dda:	3f 91       	pop	r19
 ddc:	2f 91       	pop	r18
 dde:	0f 90       	pop	r0
 de0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 de4:	0f 90       	pop	r0
 de6:	1f 90       	pop	r1
 de8:	18 95       	reti

00000dea <_exit>:
 dea:	f8 94       	cli

00000dec <__stop_program>:
 dec:	ff cf       	rjmp	.-2      	; 0xdec <__stop_program>
